diff --git a/include/configs/phycore_imx8mm.h b/include/configs/phycore_imx8mm.h
index 8a9111f14f..4df3d3ab23 100644
--- a/include/configs/phycore_imx8mm.h
+++ b/include/configs/phycore_imx8mm.h
@@ -11,7 +11,6 @@
 #include <linux/stringify.h>
 #include <asm/arch/imx-regs.h>
 
-#include "phycore_rauc_env.h"
 #include "phycore_fitimage_env.h"
 
 #define CONFIG_SYS_BOOTM_LEN		SZ_64M
@@ -39,108 +38,18 @@
 #endif
 
 #define CONFIG_EXTRA_ENV_SETTINGS \
+	"boot_script=fatload mmc ${devnum}:1 ${script_addr_r} /boot.scr; source ${script_addr_r}\0" \
+	"bootargs=console=ttymxc2,115200\0" \
+	"bootpart=2\0" \
+	"devnum=" __stringify(CONFIG_SYS_MMC_ENV_DEV) "\0" \
+	"devtype=mmc\0" \
 	"image=Image\0" \
 	"console=ttymxc2\0" \
 	"fdt_addr=0x48000000\0" \
 	"fdto_addr=0x49000000\0" \
-	"bootcmd_mfg=fastboot 0\0" \
-	"bootenv_addr=0x49100000\0" \
-	"fdt_file=" CONFIG_DEFAULT_FDT_FILE "\0" \
-	"ipaddr=192.168.3.11\0" \
-	"serverip=192.168.3.10\0" \
-	"netmask=255.225.255.0\0" \
-	"ip_dyn=no\0" \
-	"bootenv=bootenv.txt\0" \
-	"mmc_load_bootenv=fatload mmc ${mmcdev}:${mmcpart} ${bootenv_addr} ${bootenv}\0" \
-	"mtdparts=30bb0000.spi:3840k(u-boot),128k(env),128k(env_redund),-(none)\0" \
-	"mtdids=nor0=30bb0000.spi\0" \
-	"spiprobe=true\0" \
-	"emmc_dev=2\0" \
-	"sd_dev=1\0" \
-	"mmcdev=" __stringify(CONFIG_SYS_MMC_ENV_DEV) "\0" \
-	"mmcpart=" __stringify(CONFIG_SYS_MMC_IMG_LOAD_PART) "\0" \
-	"mmcroot=2\0" \
-	"mmcautodetect=yes\0" \
-	"mmcargs=setenv bootargs console=${console},${baudrate} " \
-		"root=/dev/mmcblk${mmcdev}p${mmcroot} fsck.repair=yes rootwait rw \0" \
-	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
-	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" \
-	"mmc_load_overlay=fatload mmc ${mmcdev}:${mmcpart} ${fdto_addr} ${overlay}\0" \
-	"mmc_apply_overlays=fdt address ${fdt_addr}; "	\
-		"if test ${no_extensions} = 0; then " \
-			"setenv extension_overlay_addr ${fdto_addr}; " \
-			"setenv extension_overlay_cmd \'fatload mmc ${mmcdev}:${mmcpart} " \
-				"${fdto_addr} ${extension_overlay_name}\'; " \
-			"extension scan; " \
-			"extension apply all; " \
-		"fi; " \
-		"if test ${no_overlays} = 0; then " \
-			"for overlay in $overlays; " \
-			"do; " \
-				"if run mmc_load_overlay; then " \
-					"fdt resize ${filesize}; " \
-					"fdt apply ${fdto_addr}; " \
-				"fi; " \
-			"done;" \
-		"fi;\0 " \
-	"mmcboot=echo Booting from mmc ...; " \
-		"run spiprobe; " \
-		"if run mmc_load_bootenv; then " \
-			"env import -t ${bootenv_addr} ${filesize}; " \
-		"fi; " \
-		"run mmcargs; " \
-		"run fit_test_and_run_boot; " \
-		"if run loadfdt; then " \
-			"run mmc_apply_overlays; " \
-			"booti ${loadaddr} - ${fdt_addr}; " \
-		"else " \
-			"echo WARN: Cannot load the DT; " \
-		"fi;\0 " \
-	"nfsroot=/nfs\0" \
-	"netargs=setenv bootargs console=${console},${baudrate} root=/dev/nfs ip=${nfsip} " \
-		"nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
-	"net_load_bootenv=${get_cmd} ${bootenv_addr} ${bootenv}\0" \
-	"net_load_overlay=${get_cmd} ${fdto_addr} ${overlay}\0" \
-	"net_apply_overlays=fdt address ${fdt_addr}; " \
-		"if test ${no_extensions} = 0; then " \
-			"setenv extension_overlay_addr ${fdto_addr}; " \
-			"setenv extension_overlay_cmd \'${get_cmd} ${fdto_addr} " \
-				"${extension_overlay_name}\'; " \
-			"extension scan; " \
-			"extension apply all; " \
-		"fi; " \
-		"if test ${no_overlays} = 0; then " \
-			"for overlay in $overlays; " \
-			"do; " \
-				"if run net_load_overlay; then " \
-					"fdt resize ${filesize}; " \
-					"fdt apply ${fdto_addr}; " \
-				"fi; " \
-			"done;" \
-		"fi;\0 " \
-	"netboot=echo Booting from net ...; " \
-		"run spiprobe; " \
-		"if test ${ip_dyn} = yes; then " \
-			"setenv nfsip dhcp; " \
-			"setenv get_cmd dhcp; " \
-		"else " \
-			"setenv nfsip ${ipaddr}:${serverip}::${netmask}::eth0:on; " \
-			"setenv get_cmd tftp; " \
-		"fi; " \
-		"if run net_load_bootenv; then " \
-			"env import -t ${bootenv_addr} ${filesize}; " \
-		"fi; " \
-		"run netargs; " \
-		"${get_cmd} ${loadaddr} ${image}; " \
-		"if ${get_cmd} ${fdt_addr} ${fdt_file}; then " \
-			"run net_apply_overlays; " \
-			"booti ${loadaddr} - ${fdt_addr}; " \
-		"else " \
-			"echo WARN: Cannot load the DT; " \
-		"fi;\0" \
-	"raucdev=2\0" \
-	PHYCORE_RAUC_ENV_BOOTLOGIC \
-	PHYCORE_FITIMAGE_ENV_BOOTLOGIC
+	"ramdisk_addr_r=0x49200000\0" \
+	"scan_boot_script=if test -e mmc ${devnum}:1 /boot.scr; then echo Found U-Boot script; run boot_script; echo SCRIPT FAILED: continuing...; fi\0" \
+	"script_addr_r=0x49100000\0" \
 
 #ifdef CONFIG_IMX_HAB
 #define BOOTCOMMAND_APPEND "reset;"
@@ -149,15 +58,9 @@
 #endif
 
 #define CONFIG_BOOTCOMMAND \
-	"mmc dev ${mmcdev}; if mmc rescan; then " \
-		"env exists dofitboot || setenv dofitboot 0;" \
-		"env exists doraucboot || setenv doraucboot 0 && saveenv;" \
-		"if test ${doraucboot} = 1; then " \
-			"run raucboot; " \
-		"elif run loadimage; then " \
-			"run mmcboot; " \
-		"else run netboot; " \
-		"fi; " \
+	"mmc dev ${devnum}; if mmc rescan; then " \
+		"env exist kernel_addr || setenv devnum ${mmcdev} && setenv kernel_addr_r ${loadaddr} && saveenv;" \
+		"run scan_boot_script;" \
 	"fi; " \
 	BOOTCOMMAND_APPEND
 
