From fc168089cd4258b778df35fbb20d66d64b8f26d4 Mon Sep 17 00:00:00 2001
From: SteffenRumler <steffen.rumler@conplement.de>
Date: Mon, 6 Dec 2021 16:31:48 +0100
Subject: [PATCH] Add u-boot command rstinfo used to check for power-on reset

---
 arch/arm/mach-bcm283x/Makefile   |  1 +
 arch/arm/mach-bcm283x/sys_info.c | 33 ++++++++++++++++++++++++++++++++
 cmd/Kconfig                      |  7 +++++++
 cmd/Makefile                     |  1 +
 cmd/rstinfo.c                    | 26 +++++++++++++++++++++++++
 5 files changed, 68 insertions(+)
 create mode 100644 arch/arm/mach-bcm283x/sys_info.c
 create mode 100644 cmd/rstinfo.c

diff --git a/arch/arm/mach-bcm283x/sys_info.c b/arch/arm/mach-bcm283x/sys_info.c
new file mode 100644
index 0000000000..611711e280
--- /dev/null
+++ b/arch/arm/mach-bcm283x/sys_info.c
@@ -0,0 +1,33 @@
+#include <common.h>
+#include <asm/arch/wdog.h>
+#include <asm/io.h>
+
+#if defined(CONFIG_BCM2711)
+
+/* see https://paulwratt.github.io/rpi-internal-registers-online/Region_PM.html#pm_rsts */
+#define BCM_2711_PM_RSTS_HADPOR (12)
+
+char *get_reset_cause(void)
+{
+	struct bcm2835_wdog_regs *regs = (struct bcm2835_wdog_regs *)BCM2835_WDOG_PHYSADDR;
+	uint32_t rsts = 0;
+
+	rsts = readl(&regs->rsts);
+	if ( rsts & (1 << BCM_2711_PM_RSTS_HADPOR) ) {
+		return "POR";
+	}
+
+	/* other reason like watchdog and warm start cannot be distinguished */
+	return "OTHER";
+}
+#else
+#error "SOC currently not supported"
+#endif
+
+/* Print CPU information */
+int print_cpuinfo(void)
+{
+	printf("SoC: %s\n", CONFIG_SYS_SOC);
+	printf("Reset cause: %s\n", get_reset_cause());
+	return 0;
+}

diff --git a/cmd/rstinfo.c b/cmd/rstinfo.c
new file mode 100644
index 0000000000..f16452f789
--- /dev/null
+++ b/cmd/rstinfo.c
@@ -0,0 +1,26 @@
+/*
+ *  Get Reset Cause
+ */
+
+#include <common.h>
+#include <command.h>
+
+extern int print_cpuinfo(void);
+static int do_rstinfo(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	(void)cmdtp;
+	(void)flag;
+	(void)argc;
+	(void)argv;
+	const char *reset_cause;
+
+	reset_cause = get_reset_cause();
+	printf("Reset cause: %s; set rstinfo environment variable\n", reset_cause);
+	env_set("rstinfo", reset_cause);
+	return 0;
+}
+
+U_BOOT_CMD(rstinfo, 1, 1, do_rstinfo,
+		"get restart cause",
+		"  - get the restart cause; set the environment variable rstinfo accordingly\n"
+);
