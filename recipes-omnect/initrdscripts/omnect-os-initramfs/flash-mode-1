#!/bin/bash

#
# optionally provide flashing whole disk image in INITRAMFS context
#

# Flash Mode
#     1    clone disk image from active block device to other one
#
FLASH_MODE=""

FLASH_MODE_VAR="flash-mode"
FLASH_MODE_DEVPATH_VAR="flash-mode-devpath"

# variable templates, which are replaced at build time
BOOTLOADER_START="UNDEFINED"  # optionally, start of bootloader area
UBOOT_ENV1_START="UNDEFINED"  # start of  first u-boot environment
UBOOT_ENV2_START="UNDEFINED"  # start of second u-boot environment
UBOOT_ENV_SIZE="UNDEFINED"    # size of u-boot environment
DATA_SIZE="UNDEFINED"         # initial size of data partition (in KB)

# called by generic INITRAMFS
flash_mode_1_enabled() {
    debug "flash mode 1: ${FLASH_MODE} - ${FLASH_MODE_VAR}"

    # flash mode triggered at runtime
    FLASH_MODE=$(get_bootloader_env_var ${FLASH_MODE_VAR})
    if [ "${FLASH_MODE}" == "1" ] && [ -n "${FLASH_MODE_VAR}" ]; then
        return 0  # enable flash mode; call main entry point
    fi

    return 1  # disable flash mode; normal boot; main entry point _NOT_ called
}

get_start_sector()
{
    local part_dev="$(readlink -f $1)"

    sfdisk -d $(readlink -f /dev/omnect/rootblk) | \
        sed -n "s|^${part_dev}.*start=[[:space:]]\+\([[:digit:]]\+\),.*$|\1|p"
}

# clone active disk image to other block device
run_flash_mode_1() {
    local blk_dev_dst=""
    local blk_dev_src=""
    local data_partition=""
    local data_partition_size=""
    local data_partition_start=""
    local efi_entries=""
    local extended_partition=""
    local extended_partition_size=""
    local extended_partition_start=""
    local last_lba=""
    local machine_features=$(grep ^MACHINE_FEATURES= /etc/os-release | awk -F'"' '{print $2}')
    local p=""
    local part_type=""

    echo "Entering omnect flashing mode 1 ..."

    # detect destination block device from environment variable
    blk_dev_dst=$(get_bootloader_env_var ${FLASH_MODE_DEVPATH_VAR} | cut -d= -f2)
    blk_dev_dst=$(readlink -f ${blk_dev_dst})

    # disable flash mode for subsequent restarts
    set_bootloader_env_var ${FLASH_MODE_VAR}
    set_bootloader_env_var ${FLASH_MODE_DEVPATH_VAR}

    # we already mounted /dev/omnect/boot when we're using grub. so we unmount before copying boot.
    if [ -f /usr/bin/grub-editenv ]; then
        sync
        run_cmd umount ${ROOTFS_DIR}/boot
    fi

    # check for (mandatory) substitutions of variable templates
    if [[ ! " ${machine_features} " =~ " grub " ]]; then
        if [ "${UBOOT_ENV1_START}" == "UNDEFINED" ]; then stderr_fatal "missing definition UBOOT_ENV1_START"; return 1; fi
        if [ "${UBOOT_ENV2_START}" == "UNDEFINED" ]; then stderr_fatal "missing definition UBOOT_ENV2_START"; return 1; fi
        if [ "${UBOOT_ENV_SIZE}"   == "UNDEFINED" ]; then stderr_fatal "missing definition UBOOT_ENV_SIZE"; return 1; fi
    fi

    if [ "${DATA_SIZE}"        == "UNDEFINED" ]; then stderr_fatal "missing definition DATA_SIZE"; return 1; fi

    if [ -z "${blk_dev_dst}" ]; then
        stderr_fatal "bootloader environment variable \"${FLASH_MODE_DEVPATH_VAR}\" not set"
        return 1
    fi
    for i in $(seq 1 30); do
        if [ -b "${blk_dev_dst}" ]; then break; fi
        echo "WAITING FOR destination block device \"${blk_dev_dst}\"..."
        sleep 1
    done
    if [ ${i} -eq 30 ]; then
        stderr_fatal "cannot find destination block device \"${blk_dev_dst}\""
        return 1
    fi

    # detect source block device
    blk_dev_src=$(readlink -f /dev/omnect/rootblk)

    if [ ! -b "${blk_dev_src}" ]; then stderr_fatal "${blk_dev_src} does not exist or not a block device"; return 1; fi

    if [ "${blk_dev_dst}" == "${blk_dev_src}" ]; then
        stderr_fatal "identical source and destination: \"${blk_dev_dst}\""
        return 1
    fi

    data_partition=$(readlink -f /dev/omnect/data)
    if [ -z "${data_partition}" ]; then
        stderr_fatal "cannot detect data partition"
        return 1
    fi
    # adapt size of data partition to initial value, before (optional) resize of data partition
    data_partition_size=$((DATA_SIZE * 2)) # 1024 (yocto) -> 512 (sfdisk)

    # check for partition type
    part_type=$(get_partition_type)
    if [ "${part_type}" = "gpt" ]; then
        echo "DUMP gpt / partition table..."
        data_partition_start=$(get_start_sector ${data_partition})
        last_lba=$((data_partition_start+data_partition_size-1))
        sfdisk --dump "${blk_dev_src}" | \
        sed "s|^last-lba: \(.*\)$|last-lba: ${last_lba}|g" | \
        sed "s|\(^${data_partition}.*size=[[:space:]]\+\)\([[:digit:]]\+,\)\(.*\)$|\1 ${data_partition_size}, \3|g" >/tmp/sfdisk.txt
    elif [ "${part_type}" = "dos" ]; then
        echo "DUMP mbr / partition table..."
        extended_partition=$(readlink -f /dev/omnect/extended)
        if [ -z "${extended_partition}" ]; then
            stderr_fatal "cannot detect extended partition"
            return 1
        fi
        # calculate size of extended partition, not affected by (optional) resize of data partition
        extended_partition_start=$(get_start_sector $(readlink -f extended))
        data_partition_start=$(get_start_sector ${data_partition})
        extended_partition_size=$((data_partition_start - extended_partition_start + data_partition_size))
        if [ -z "${extended_partition_size}" ]; then
            stderr_fatal "cannot detect extended partition size"
            return 1
        fi

        sfdisk --dump "${blk_dev_src}" | \
        sed "s|\(^${data_partition}.*size=[[:space:]]\+\)\([[:digit:]]\+,\)\(.*\)$|\1 ${data_partition_size}, \3|g" | \
        sed "s|\(^${extended_partition}.*size=[[:space:]]\+\)\([[:digit:]]\+,\)\(.*\)$|\1 ${extended_partition_size}, \3|g" >/tmp/sfdisk.txt
    else
        stderr_fatal "unhandled partition type: \"${part_type}\""
        return 1
    fi

    echo "######## cloning disk: ${blk_dev_src} -> ${blk_dev_dst} ########"
    cat /tmp/sfdisk.txt
    run_cmd_stdout "sfdisk ${blk_dev_dst} </tmp/sfdisk.txt"
    # -- after sfdisk, the new partitions are available --

    # do we need partition handling?
    # eg root=/dev/sda2 -> rootblk=/dev/sda vs root=/dev/mmcblk1p2 -> rootblk=/dev/mmcblk1
    if [ ! -b "${blk_dev_dst}1" ]; then
        p="p"
    fi

    echo "CHECK for new partition scheme.."
    if [ ! -b "${blk_dev_dst}${p}1" ]; then stderr_fatal "\"${blk_dev_dst}${p}1\" is not a block device"; return 1; fi
    if [ ! -b "${blk_dev_dst}${p}2" ]; then stderr_fatal "\"${blk_dev_dst}${p}2\" is not a block device"; return 1; fi
    if [ ! -b "${blk_dev_dst}${p}3" ]; then stderr_fatal "\"${blk_dev_dst}${p}3\" is not a block device"; return 1; fi
    if [ ! -b "${blk_dev_dst}${p}4" ]; then stderr_fatal "\"${blk_dev_dst}${p}4\" is not a block device"; return 1; fi
    if [ ! -b "${blk_dev_dst}${p}5" ]; then stderr_fatal "\"${blk_dev_dst}${p}5\" is not a block device"; return 1; fi
    if [ ! -b "${blk_dev_dst}${p}6" ]; then stderr_fatal "\"${blk_dev_dst}${p}6\" is not a block device"; return 1; fi
    if [ ! -b "${blk_dev_dst}${p}7" ]; then stderr_fatal "\"${blk_dev_dst}${p}7\" is not a block device"; return 1; fi
    if [ "${part_type}" = "dos" ]; then
        if [ ! -b "${blk_dev_dst}${p}8" ]; then stderr_fatal "\"${blk_dev_dst}${p}8\" is not a block device"; return 1; fi
    fi

    # handle u-boot not stored inside the boot partition
    # e.g. not UNDEFINED if BOOTLOADER_SEEK is set (phytec boards)
    if [ "${BOOTLOADER_START}" != "UNDEFINED" ]; then
        echo "COPY u-boot..."
        run_cmd_stdout dd if=${blk_dev_src} iflag=skip_bytes skip=$((BOOTLOADER_START*1024)) \
                          of=${blk_dev_dst} oflag=seek_bytes seek=$((BOOTLOADER_START*1024)) \
                          bs=1024 count=$((UBOOT_ENV1_START - BOOTLOADER_START)) || return 1
    fi

    # enforce first boot condition
    echo "MKFS etc and data..."

    if [ "${part_type}" = "gpt" ]; then
        reformat_ext4_fs "${blk_dev_dst}${p}6" "etc"
        reformat_ext4_fs "${blk_dev_dst}${p}7" "data"
    elif [ "${part_type}" = "dos" ]; then
        reformat_ext4_fs "${blk_dev_dst}${p}7" "etc"
        reformat_ext4_fs "${blk_dev_dst}${p}8" "data"
    else
        echo "unhandled partition type: ${part_type}"
    fi

    echo "COPY boot, factory and cert..."
    run_cmd_stdout dd if=/dev/omnect/boot    of="$(readlink -f ${blk_dev_dst}${p}1)" bs=10M || return 1
    if [ "${part_type}" = "gpt" ]; then
        run_cmd_stdout dd if=/dev/omnect/factory of="$(readlink -f ${blk_dev_dst}${p}4)" bs=10M || return 1
        run_cmd_stdout dd if=/dev/omnect/cert    of="$(readlink -f ${blk_dev_dst}${p}5)" bs=10M || return 1
    elif [ "${part_type}" = "dos" ]; then
        run_cmd_stdout dd if=/dev/omnect/factory of="$(readlink -f ${blk_dev_dst}${p}5)" bs=10M || return 1
        run_cmd_stdout dd if=/dev/omnect/cert    of="$(readlink -f ${blk_dev_dst}${p}6)" bs=10M || return 1
    fi

    orig_uuid=$(sfdisk --part-uuid ${blk_dev_dst} 1)
    new_uuid=$(uuidgen)
    echo "Make partition UUID of copied boot partition unique (${orig_uuid} -> ${new_uuid})"
    run_cmd_stdout sfdisk --part-uuid ${blk_dev_dst} 1 ${new_uuid} || return 1

    echo "COPY current rootfs to rootfsA..."
    run_cmd_stdout e2image -ra -p "/dev/omnect/rootCurrent" "$(readlink -f ${blk_dev_dst}${p}2)" || return 1

    orig_uuid=$(sfdisk --part-uuid ${blk_dev_dst} 2)
    new_uuid=$(uuidgen)
    echo "Make partition UUID of copied rootfs partition unique (${orig_uuid} -> ${new_uuid})"
    run_cmd_stdout sfdisk --part-uuid ${blk_dev_dst} 2 ${new_uuid} || return 1

    if [[ " ${machine_features} " =~ " grub " ]]; then
        echo "Configuring grub"
        run_cmd_stdout mkdir -p /tmp/boot
        run_cmd_stdout mount ${blk_dev_dst}${p}1 /tmp/boot
        cp /etc/omnect/grubenv.in /tmp/boot/EFI/BOOT/grubenv
        run_cmd_stdout umount /tmp/boot
    else
        echo "ENFORCE default bootloader environment..."
        # Warning: we enforce  here that there is a redundant uboot env available, even if the initial wic did'nt have one
        run_cmd_stdout dd if=/etc/omnect/uboot-env.bin of="${blk_dev_dst}" oflag=seek_bytes seek=$((UBOOT_ENV1_START*1024)) || return 1
        run_cmd_stdout dd if=/etc/omnect/uboot-env.bin of="${blk_dev_dst}" oflag=seek_bytes seek=$((UBOOT_ENV2_START*1024)) || return 1
    fi

    flash_mode_efi_handling ${blk_dev_dst} ${p}

    echo "flash mode 1 successfully finished"
    run_cmd_stdout sync
    return 0
}

# main entry point
flash_mode_1_run() {
    add_module_post_hook on_exit
    set -o pipefail
    local blk_dev_data=""

    run_flash_mode_1 2>&1 | tee /tmp/flash-mode-1.log >/dev/console 2>&1;
    return=${?}
    blk_dev_data=$(readlink -f /dev/omnect/data)
    if [ -b "${blk_dev_data}" ]; then
        # store log file
        mkdir -p /tmp/mnt_data
        check_fs "data"
        mount_partition "ext4" "${blk_dev_data}" "/tmp/mnt_data" "defaults,rw"
        run_cmd cp /tmp/flash-mode-1.log "/tmp/mnt_data"
        run_cmd sync
        run_cmd umount "/tmp/mnt_data"
    fi
    if [ ${return} -eq 0 ]; then poweroff -f; fi
}
