#!/bin/sh

fs_mount_enabled() {
    return 0
}

run_fs_mount()
{
    if [ -z "${ROOTFS_DIR}" ]; then
        msg_fatal "no ROOTFS_DIR"
        return 1
    fi

    msg "omnect-os initramfs fs mount"

    # we already mounted /dev/omnect/boot when we're using grub. so we unmount.
    if [ -f /usr/bin/grub-editenv ]; then
        sync
        run_cmd umount ${ROOTFS_DIR}/boot
    fi

    # the comma separated option list is ordered; i.e., higher preference at the right hand side
    mnt_opts_default="defaults,noatime,nodiratime,async"

    # mount rootfs
    mount_partition "ext4" "${bootparam_root}" "${ROOTFS_DIR}" "${mnt_opts_default},ro" || return 1
    # bind mount rootfs without overlay under /mnt/rootCurrent
    run_cmd mount --bind ${ROOTFS_DIR} ${ROOTFS_DIR}/mnt/rootCurrent
    run_cmd mount --make-private ${ROOTFS_DIR}/mnt/rootCurrent

    # mount boot
    check_fs "boot"
    mount /dev/omnect/boot "${ROOTFS_DIR}/boot" || return 1

    # mount cert
    check_fs "cert"
    mount_partition "ext4" "/dev/omnect/cert" "${ROOTFS_DIR}/mnt/cert" "${mnt_opts_default},rw" || return 1
    run_cmd mkdir -p ${ROOTFS_DIR}/mnt/cert/ca
    run_cmd mkdir -p ${ROOTFS_DIR}/mnt/cert/priv

    # mount factory
    mount_partition "ext4" "/dev/omnect/factory" "${ROOTFS_DIR}/mnt/factory" "${mnt_opts_default},ro" || return 1

    setup_etc_partition "${ROOTFS_DIR}" "${mnt_opts_default},rw" || return 1

    # mount data partition
    #     mount flags can be optionally set via u-boot environment
    data_opts=$(get_bootloader_env_var "data-mount-options")
    if [ -n "${data_opts}" ]; then
        msg "note, bootloader variable data-mount-options set; going to use it"
    else
        data_opts="${mnt_opts_default},rw"
    fi
    setup_data_partition "${ROOTFS_DIR}" "${data_opts}" || return 1

    # mount tmpfs
    mount -t tmpfs -o mode=0755,nodev,nosuid,strictatime tmpfs  ${ROOTFS_DIR}/run || return 1
    mount -t tmpfs -o defaults tmpfs  ${ROOTFS_DIR}/var/volatile || return 1

    return 0
}

fs_mount_run() {
    add_module_post_hook on_exit
    run_fs_mount
    return=${?}
}
