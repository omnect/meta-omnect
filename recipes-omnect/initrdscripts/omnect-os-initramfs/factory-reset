#!/bin/sh

#
# handle triggered factory reset
#
#   + The factory reset has to be performed before mounting the logical filesystem tree,
#     because it re-formats the filesystems part of the partitions etc and data.

factory_reset_backup_dir="/tmp/factory_reset/backup"
factory_reset=""
warnings=""
mount=0

# called by generic INITRAMFS
factory_reset_enabled() {
    ret=0
    factory_reset=$(get_bootloader_env_var "factory-reset")
    echo "null" > /tmp/factory-reset.json
    if [ -z "${factory_reset}" ]; then
        ret=1 # no factory reset triggered; normal boot
    else
        set_bootloader_env_var "factory-reset" ""
    fi

    # we already mounted /dev/omnect/boot when we're using grub. so we unmount so we don't disturb the restore mount/umount handling
    if [ -f /usr/bin/grub-editenv ]; then
        sync
        run_cmd umount ${ROOTFS_DIR}/boot
    fi

    return ${ret}
}

# wipe a partition using dd command
#   in the case of wear leveling, it does not guarantee strict privacy
wipe_partition_dd() {
    local part="$1"
    local seek_bytes=$((1024+1024))  # alignment + superblock

    if [ -z "${part}"  ]; then return 1; fi

    # skip superblock, to keep label in the case of interruption; may take a longer time
    run_cmd dd bs=1M if=/dev/urandom iflag=fullblock oflag=direct oflag=seek_bytes seek=${seek_bytes} of=${part} status=progress
    sync
    return 0
}

# wipe based on commands rm and fstrim
#   assumption: the disk supports the ATA TRIM command
#   in the case of wear leveling, it does not guarantee strict privacy
wipe_partition_fstrim() {
    local part="$1"
    local mnt_point="/tmp/mnt"

    if [ -z "${part}"  ]; then return 1; fi

    run_cmd mkdir -p ${mnt_point}
    run_cmd mount ${part} ${mnt_point} || return 0  # abort in case of failed mount
        cd ${mnt_point} || return 1
            # 1st: remove all
            run_cmd /bin/rm -rf *
        cd - >/dev/null
        # 2nd: tell the disk the removed blocks
        run_cmd fstrim -v ${mnt_point}
    run_cmd umount ${mnt_point}
    return 0
}

factory_reset_wipe_dd() {
    local ret=0

    msg "wipe method 1"
    wipe_partition_dd /dev/omnect/etc  || ret=$?
    wipe_partition_dd /dev/omnect/data || ret=$?
    return ${ret}
}

factory_reset_wipe_fstrim() {
    local ret=0

    msg "wipe method 2"
    wipe_partition_fstrim /dev/omnect/etc  || ret=$?
    wipe_partition_fstrim /dev/omnect/data || ret=$?
    return ${ret}
}

factory_reset_wipe_custom() {
    local custom_wipe="/opt/factory_reset/custom-wipe"

    if [ ! -x ${custom_wipe} ]; then
        msg "ERROR: custom wipe \"${custom_wipe}\" not found or executable; abort..."
        return 2
    fi
    msg "Running custom wipe ${custom_wipe}..."
    run_cmd ${custom_wipe}
    if [ $? -ne 0 ]; then
        msg "ERROR: custom wipe \"${custom_wipe}\" failed; abort..."
        return 1
    fi
    return 0
}

# backup file or directory
factory_reset_backup() {
    local path_name="$1"  # file or directory
    local ret=0

    msg "backup: ${path_name}"

    if [ ! -e "${ROOTFS_DIR}/${path_name}" ]; then
        msg "->does not exist; ignore..."
        return 0
    fi

    # do backup, keep permissions and ownership
    run_cmd cp --parents -av "${ROOTFS_DIR}/${path_name}" "${factory_reset_backup_dir}"
    ret=$?

    sync
    return ${ret}
}

factory_reset_restore() {
    local path_name="$1"  # file or directory
    local ret=0
    local destpath=$(dirname ${ROOTFS_DIR}${path_name})
    local nested_mount=""

    msg "restore: ${path_name}"

    if [ ! -e "${factory_reset_backup_dir}/${ROOTFS_DIR}/${path_name}" ]; then
        msg "->does not exist; ignore..."
        return 0
    fi

    while [[ "${destpath}" != "${ROOTFS_DIR}" ]]; do
        mountpoint -q ${destpath} && nested_mount=${destpath/${ROOTFS_DIR}} && break
        destpath=$(dirname ${destpath})
    done

    # do restore, keep permissions and ownership
    if [ -n "${nested_mount}" ]; then
        msg "nested mount: ${factory_reset_backup_dir}/${ROOTFS_DIR}${nested_mount}"
        cd ${factory_reset_backup_dir}/${ROOTFS_DIR}${nested_mount}
        path_name=${path_name#${nested_mount}\/}
        run_cmd cp --parents -av "${path_name}" "${ROOTFS_DIR}${nested_mount}"
        ret=$?
        cd - &>/dev/null
    else
        msg_error "restore: no mountpoint found in destination path: ${destpath}"
        ret=66
    fi


    sync
    return ${ret}
}

iterate_restore_list() {
    local    do_backup="${1}"
    local restore_list=( "${@:2}" )

    local ret=0
    local status=0
    local context=""

    for i in ${restore_list[@]}; do
        if [ ${do_backup} -eq 1 ]; then
            factory_reset_backup "${i}"; ret=$?
            [[ ${ret} -ne 0 ]] && { handle_status "2" "${ret}" "${i}:backup" "${restore_list[@]}"; return ${ret}; }
        else
            factory_reset_restore "${i}"; ret=$?
            if [ ${ret} -ne 0 ]; then
                status=2;
                context+="${i};"
            fi  # continue restoring next paths; deliver failure
        fi
    done

    if [ 2 -eq ${status} ]; then
        context="${context%?}:restore"
        handle_status "${status}" "${ret}" "${context}" "${restore_list[@]}"
        return ${ret}
    fi

    # ToDO reflect possible wiper error in status?
    [[ 0 -eq ${do_backup} ]] && handle_status "0" "0" "" "${restore_list[@]}"
    sync
    return 0
}

factory_reset_mount() {
    mount=1
    mount_partition "ext4" "/dev/omnect/rootCurrent" "${ROOTFS_DIR}" "defaults,ro"
    mount_partition "ext4" "/dev/omnect/factory" "${ROOTFS_DIR}/mnt/factory" "defaults,ro"
    setup_etc_partition  "${ROOTFS_DIR}" "defaults,rw"
    setup_data_partition "${ROOTFS_DIR}" "defaults,rw"
    setup_persistent_var_log "${ROOTFS_DIR}"
}

factory_reset_umount() {
    mount=0
    umount_persistent_var_log "${ROOTFS_DIR}"
    umount_data_partition "${ROOTFS_DIR}"
    umount_etc_partition  "${ROOTFS_DIR}"
    run_cmd umount "${ROOTFS_DIR}/mnt/factory"
    umount_rootfs_partition "${ROOTFS_DIR}"
    msg "mount: "
    run_cmd mount
}

handle_status() {
    local status=${1}
    local error=${2}
    local context=${3}
    local preserve_paths=( "${@:4}" )

    msg "status: status=${status}, error=${error}, context=${context}, preserve_path=${preserve_paths[@]}"
    if [ -n "${warnings}" ]; then
        [[ -n "${context}" ]] && context+=";"
        context+="${warnings}"
    fi

    if [ -n "${context}" ]; then
        echo "{}" | jq -e \
            --argjson status "${status}" \
            --arg error "${error}" \
            --arg context "${context}" \
            '.status=$status | .error=$error | .context=$context | .paths=$ARGS.positional' --args ${preserve_paths[@]} > \
            /tmp/factory-reset.json
    else
        echo "{}" | jq -e \
            --argjson status "${status}" \
            --arg error "${error}" \
            '.status=$status | .error=$error | .paths=$ARGS.positional' --args ${preserve_paths[@]} > \
            /tmp/factory-reset.json
    fi
}

factory_reset_post () {
    [[ ${mount} -eq 1 ]] && factory_reset_umount
}

# main entry point
factory_reset_run() {
    local mode=""
    local preserve=""

    add_module_post_hook factory_reset_post

    if [ -z "${ROOTFS_DIR}" ]; then
        fatal "no ROOTFS_DIR"
        return 1
    fi
    mode=$(echo "${factory_reset}" | jq -e -r '.mode') || { handle_status "1" "-" "mode not set" ""; return; }
    preserve=$(echo "${factory_reset}" | jq -e -r '.preserve') || { handle_status "3" "-" "preserve object not set" ""; return; }
    if [ "[]" != "${preserve}" ]; then
        preserve=($(echo "${factory_reset}" | jq -e -r '.preserve | .[]')) || { handle_status "3" "-" "could_not_parse_preserve_array" ""; return; }
    else
        preserve=()
    fi

    msg "Running factory-reset [mode=${mode}, preserve=${preserve[@]}]..."
    factory_reset_mount

    # create preserve_list
    declare -a preserve_list
    preserve_list+=("/etc/omnect/factory-reset.d/")
    if [[ " ${preserve[@]} " =~ " applications " ]]; then
        preserve=( ${preserve[@]/applications} )
        local preserve_path="";
        for i in $(find ${ROOTFS_DIR}/etc/omnect/factory-reset.d/ -iname *.json); do
            preserve_path=$(jq -r -e '.paths' ${i}) || \
                { handle_status "3" "-" "${i/${ROOTFS_DIR}}: no path object" "${preserve_list[@]}"; return; }
            if [ "[]" != "${preserve_path}" ]; then
                preserve_list+=( $(jq -r -e '.paths[]' ${i}) ) || \
                    { handle_status "3" "${?}" "${i/${ROOTFS_DIR}}: couldn't parse paths array" "${preserve_list[@]}"; return; }
            fi
        done
    fi

    for key in "${preserve[@]}"; do
        preserve_path=$(jq -r -e --arg key "${key}" .$key ${ROOTFS_DIR}/etc/omnect/factory-reset.json) || \
                { handle_status "3" "-" "${i/${ROOTFS_DIR}}: no ${key} object" "${preserve_list[@]}"; return; }
        if [ "[]" != "${preserve_path}" ]; then
            preserve_list+=( $(jq -r -e --arg key "${key}" .$key[] ${ROOTFS_DIR}/etc/omnect/factory-reset.json) ) || \
                { handle_status "3" "${?}" "${ROOTFS_DIR}/etc/omnect/factory-reset.json:${key}" "${preserve_list[@]}"; return; }
        fi
    done

    msg "factor-reset preserve_list=${preserve_list[@]}"

    # do the backup
    run_cmd mkdir -p ${factory_reset_backup_dir}
    iterate_restore_list 1 "${preserve_list[@]}" || return;
    factory_reset_umount

    # possibly wipe
    wipe_ret=0
    case ${mode} in
        1) wipe_ret=0 # no wipe
           ;;
        2) factory_reset_wipe_dd
           wipe_ret=$?
           ;;
        3) factory_reset_wipe_fstrim
           wipe_ret=$?
           ;;
        4) factory_reset_wipe_custom
           wipe_ret=$?
           ;;
        *) msg "ERROR: factory reset mode \"${mode}\" not supported; abort..."
           handle_status "1" "-" "" "${preserve_list[@]}"
           return 0
           ;;
    esac

    # if we had a wipe error, we will try to continue anyway
    if [ 0 -ne ${wipe_ret} ]; then
        warning_wipe="warning: wipe failed with \"${wipe_ret}\""
        [[ -n "${warnings}" ]] && warnings+=";"
        warnings+="${warning_wipe}"
        msg_warning "${warning_wipe/"warning: "}"
    fi

    # enforce mkfs
    reformat_ext4_fs "/dev/omnect/data" "data"
    reformat_ext4_fs "/dev/omnect/etc" "etc"

    # restore
    factory_reset_mount  # logical filesystem tree
    iterate_restore_list 0 "${preserve_list[@]}"
    factory_reset_umount
    msg "factory-reset done"
}
