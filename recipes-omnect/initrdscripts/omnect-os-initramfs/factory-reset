#!/bin/sh

#
# handle triggered factory reset
#
#   + The factory reset has to be performed before mounting the logical filesystem tree,
#     because it re-formats the filesystems part of the partitions etc and data.
#
#   + In the case of a present restore list (see FACTORY_RESET_RESTORE_LIST_VAR, below),
#     the filesystems etc and data have to be mounted, in order to establish the logical
#     filesystem tree, needed for backup and restore.
#

# name of u-boot environment variable used for factory reset (trigger and wipe mode)
FACTORY_RESET_VAR="factory-reset"

# name of u-boot environment variable used for optional list of path names to be restored,
# surviving the factory reset
FACTORY_RESET_RESTORE_LIST_VAR="factory-reset-restore-list"

# directory used to backup and restore paths in FACTORY_RESET_RESTORE_LIST_VAR
FACTORY_RESET_BACKUP_DIR="/tmp/factory_reset/backup"

# u-boot environment variable used to return factory reset status
FACTORY_RESET_STATUS_VAR="factory-reset-status"

# factory reset status
FACTORY_RESET_RET1=""
FACTORY_RESET_RET2=""

# called by generic INITRAMFS
factory_reset_enabled() {
    return 0  # enable main entry point
}

# wipe a partition using dd command
#   in the case of wear leveling, it does not guarantee strict privacy
wipe_partition_dd() {
    local part="$1"
    local seek_bytes=$((1024+1024))  # alignment + superblock

    if [ -z "${part}"  ]; then return 1; fi

    # skip superblock, to keep label in the case of interruption; may take a longer time
    run_cmd dd bs=1M if=/dev/urandom iflag=fullblock oflag=direct oflag=seek_bytes seek=${seek_bytes} of=${part} status=progress
    sync
    return 0
}

# wipe based on commands rm and fstrim
#   assumption: the disk supports the ATA TRIM command
#   in the case of wear leveling, it does not guarantee strict privacy
wipe_partition_fstrim() {
    local part="$1"
    local mnt_point="/tmp/mnt"

    if [ -z "${part}"  ]; then return 1; fi

    run_cmd mkdir -p ${mnt_point}
    run_cmd mount ${part} ${mnt_point} || return 0  # abort in case of failed mount
        cd ${mnt_point} || return 1
            # 1st: remove all
            run_cmd /bin/rm -rf *
        cd - >/dev/null
        # 2nd: tell the disk the removed blocks
        run_cmd fstrim -v ${mnt_point}
    run_cmd umount ${mnt_point}
    return 0
}

factory_reset_wipe_dd() {
    local ret=0

    msg "wipe method 1"
    wipe_partition_dd "${ETC_PART}"  || ret=$?
    wipe_partition_dd "${DATA_PART}" || ret=$?
    return ${ret}
}

factory_reset_wipe_fstrim() {
    local ret=0

    msg "wipe method 2"
    wipe_partition_fstrim "${ETC_PART}"  || ret=$?
    wipe_partition_fstrim "${DATA_PART}" || ret=$?
    return ${ret}
}

factory_reset_wipe_custom() {
    local custom_wipe="/opt/factory_reset/custom-wipe"

    if [ ! -x ${custom_wipe} ]; then
        msg "ERROR: custom wipe \"${custom_wipe}\" not found or executable; abort..."
        return 2
    fi
    msg "Running custom wipe ${custom_wipe}..."
    run_cmd ${custom_wipe}
    if [ $? -ne 0 ]; then
        msg "ERROR: custom wipe \"${custom_wipe}\" failed; abort..."
        return 1
    fi
    return 0
}

factory_reset_finish() {
    # remove factory reset trigger at this point
    # interrupted factory reset will be replayed
    # this causes a new udev event regarding (new) partitions sent by the kernel; the reboot below handles this
    set_bootloader_env_var ${FACTORY_RESET_VAR}
    set_bootloader_env_var ${FACTORY_RESET_RESTORE_LIST_VAR}

    # set return status
    set_bootloader_env_var ${FACTORY_RESET_STATUS_VAR} "${FACTORY_RESET_RET1}:${FACTORY_RESET_RET2}"

    # get into normal startup
    msg "Rebooting system..."
    run_cmd reboot -f
    # -- never reached --
}

# backup file or directory
factory_reset_backup() {
    local path_name="$1"  # file or directory
    local ret=0

    msg "backup: ${path_name}"

    if [ ! -e "${ROOTFS_DIR}/${path_name}" ]; then
        msg "->does not exist; ignore..."
        return 0
    fi

    # do backup, keep permissions and ownership
    run_cmd cp --parents -av "${ROOTFS_DIR}/${path_name}" "${FACTORY_RESET_BACKUP_DIR}"
    ret=$?

    sync
    return ${ret}
}

factory_reset_restore() {
    local path_name="$1"  # file or directory
    local ret=0

    msg "restore: ${path_name}"

    if [ ! -e "${FACTORY_RESET_BACKUP_DIR}/${ROOTFS_DIR}/${path_name}" ]; then
        msg "->does not exist; ignore..."
        return 0
    fi

    cd ${FACTORY_RESET_BACKUP_DIR}/${ROOTFS_DIR}
        # do restore, keep permissions and ownership
        run_cmd cp --parents -av "${path_name:1}" "${ROOTFS_DIR}"
        ret=$?
    cd -

    sync
    return ${ret}
}

iterate_restore_list() {
    local restore_list="$1"
    local    do_backup="$2"
    local ret=0
    local status=0

    restore_list=${restore_list//;/ }
    for i in ${restore_list}; do
        if [ ${do_backup} -eq 1 ]; then
            factory_reset_backup "${i}"; ret=$?
            if [ ${ret} -ne 0 ]; then status=${ret}; break; fi  # break backup ; deliver failure
        else
            factory_reset_restore "${i}"; ret=$?
            if [ ${ret} -ne 0 ]; then status=${ret}; fi  # continue restoring next paths; deliver failure
        fi
    done
    return ${status}
}

factory_reset_mount() {
    mount_partition "ext4" "/dev/omnect/rootCurrent" "${ROOTFS_DIR}" "defaults,ro"
    mount_partition "ext4" "${FACTORY_PART}" "${ROOTFS_DIR}/mnt/factory" "defaults,ro"
    setup_etc_partition  "${ROOTFS_DIR}" "$(get_block_device etc)"  "defaults,rw"
    setup_data_partition "${ROOTFS_DIR}" "$(get_block_device data)" "defaults,rw"
    setup_persistent_var_log "${ROOTFS_DIR}"
}

factory_reset_umount() {
    umount_persistent_var_log "${ROOTFS_DIR}"
    umount_data_partition "${ROOTFS_DIR}"
    umount_etc_partition  "${ROOTFS_DIR}"
    run_cmd umount "${ROOTFS_DIR}/mnt/factory"
    umount_rootfs_partition "${ROOTFS_DIR}"
}

# main entry point
factory_reset_run() {
    # explictly no exit hook handling here

    if [ -z "${ROOTFS_DIR}" ]; then
        fatal "no ROOTFS_DIR"
        return 1
    fi

    factory_reset_mode=$(get_bootloader_env_var "${FACTORY_RESET_VAR}")
    if [ -z "${factory_reset_mode}" ]; then
        return  # no factory reset triggered; normal boot
    fi

    factory_reset_restore_list=$(get_bootloader_env_var "${FACTORY_RESET_RESTORE_LIST_VAR}")

    FACTORY_PART=$(get_block_device factory)
       DATA_PART=$(get_block_device    data)
        ETC_PART=$(get_block_device     etc)

    msg "Running Factory Reset [mode=${factory_reset_mode}]..."

    if [ -n "${factory_reset_restore_list}" ]; then
        msg "restore list present"
        factory_reset_mount  # logical filesystem tree

        # do the backup
        run_cmd mkdir -p ${FACTORY_RESET_BACKUP_DIR}
        iterate_restore_list "${factory_reset_restore_list}" 1
        if [ $? -ne 0 ]; then
            # severe error; do not continue with factory reset
            FACTORY_RESET_RET2="-"; FACTORY_RESET_RET1=2
            factory_reset_finish  # does not return
        fi

        factory_reset_umount  # prepare subsequent re-format
    fi

    case ${factory_reset_mode} in
        1) FACTORY_RESET_RET2=0; FACTORY_RESET_RET1=0  # no wipe
           ;;
        2) factory_reset_wipe_dd
           FACTORY_RESET_RET2=$?; FACTORY_RESET_RET1=0
           ;;
        3) factory_reset_wipe_fstrim
           FACTORY_RESET_RET2=$?; FACTORY_RESET_RET1=0
           ;;
        4) factory_reset_wipe_custom
           FACTORY_RESET_RET2=$?; FACTORY_RESET_RET1=0
           ;;
        *) msg "ERROR: factory reset mode ${factory_reset_mode} not supported; abort..."
           FACTORY_RESET_RET2="-"; FACTORY_RESET_RET1=1
           ;;
    esac

    # severe errors
    if [ ${FACTORY_RESET_RET1} -ne 0 ] || [ ${FACTORY_RESET_RET2} -ne 0 ]; then factory_reset_finish; fi

    # no severe errors; enforce mkfs
    check_ext4_fs "data" "${DATA_PART}" 1
    check_ext4_fs "etc"  "${ETC_PART}"  1

    if [ -n "${factory_reset_restore_list}" ]; then
        factory_reset_mount  # logical filesystem tree

        # restore backup
        iterate_restore_list "${factory_reset_restore_list}" 0
        if [ $? -ne 0 ]; then
            FACTORY_RESET_RET2="-"; FACTORY_RESET_RET1=2
        fi
    fi

    factory_reset_finish  # does not return
}
