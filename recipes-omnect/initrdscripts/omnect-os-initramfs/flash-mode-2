#!/bin/bash

#
# optionally provide flashing whole disk image in INITRAMFS context
#

# Flash Mode
#     2    flash disk image from network to active block device
#
OMNECT_FLASH_MODE=""

OMNECT_FLASH_MODE_VAR="flash-mode"
OMNECT_FLASH_MODE_FLAG_FILE="/etc/enforce_flash_mode"
OMNECT_FLASH_MODE_FIFO="/home/omnect/wic.xz"
OMNECT_FLASH_MODE_BMAP_FILE="/home/omnect/wic.bmap"

# called by generic INITRAMFS
flash_mode_2_enabled() {
    debug "flash mode 2: ${OMNECT_FLASH_MODE}"

    # flag file (part of "omnect-os-initramfs-test")
    if [ -f ${OMNECT_FLASH_MODE_FLAG_FILE} ]; then
        msg "enable flash mode: by ${OMNECT_FLASH_MODE_FLAG_FILE}"
        OMNECT_FLASH_MODE=2
        return 0  # enable flash mode; call main entry point
    fi

    # flash mode triggered at runtime
    OMNECT_FLASH_MODE=$(get_bootloader_env_var ${OMNECT_FLASH_MODE_VAR})
    if [ "${OMNECT_FLASH_MODE}" == "2" ]; then
        return 0  # enable flash mode; call main entry point
    fi

    return 1  # disable flash mode; normal boot; main entry point _NOT_ called
}

setup_fifo() {
    # setup FIFO
    run_cmd mkfifo ${OMNECT_FLASH_MODE_FIFO} || return 1
    run_cmd chown omnect:omnect ${OMNECT_FLASH_MODE_FIFO} || return 1
}

setup_network() {
    local if_name="$1"
    local ip_addr=""

    # get network interface up
    while true; do
        ifconfig ${if_name} up >/dev/null 2>&1
        if [ $? -eq 0 ]; then break; fi
        msg "Waiting for ${if_name} ..."
        sleep 1
    done

    # start dhcp client; it is backgrounding in the case the IP address was assigned or timeout
    run_cmd mkdir -p /tmp || return 1
    run_cmd dhcpcd ${if_name} || return 1

    # wait for IPv4 address
    while true; do
        msg "Waiting for IP address... on ${if_name}"
        ip_addr=$(ip addr show dev ${if_name} | grep "inet " | awk '{print $2}')
        if [ -n "${ip_addr}" ]; then break; fi
        sleep 1
    done
    OMNECT_FLASH_MODE_IP_ADDR="${ip_addr%/*}"

    # setup PTY
    run_cmd mkdir -p /dev/pts || return 1
    run_cmd mount -t devpts devpts /dev/pts || return 1

    # start SSH server; generate host key on the fly
    mkdir -p /etc/dropbear
    run_cmd dropbear -R || return 1
}

run_bmap_tool() {
    local umount_dev=""
    local blk_dev=""
    local bmap_ret=""

    # detect block device
    blk_dev=$(readlink -f /dev/omnect/boot)
    blk_dev=${blk_dev%p*}
    if [ ! -b "${blk_dev}" ]; then msg_fatal "${blk_dev} does not exist or not a block device"; return 1; fi

    # bmap file must be copied with scp
    msg "please run  scp <your-bmap-file> omnect@${OMNECT_FLASH_MODE_IP_ADDR}:$(basename ${OMNECT_FLASH_MODE_BMAP_FILE})"
    while true; do
        if [ -f "${OMNECT_FLASH_MODE_BMAP_FILE}" ]; then break; fi
        sleep 1
    done

    # umount, if necessary
    mkdir -p /tmp
    cp /proc/mounts /tmp/all_mounts  # make snapshot
    while read x; do
        umount_dev=$(echo $x | awk '{print $1}')
        echo ${umount_dev} | grep -q "$(basename ${blk_dev})"
        if [ $? -eq 0 ]; then
            echo "umount ${umount_dev}"
            umount ${umount_dev} 2>/dev/null
        fi
    done </tmp/all_mounts

    msg "please run  scp <your-wic-image> omnect@${OMNECT_FLASH_MODE_IP_ADDR}:$(basename ${OMNECT_FLASH_MODE_FIFO})"
    export PATH
    run_cmd_stdout bmaptool copy --bmap ${OMNECT_FLASH_MODE_BMAP_FILE} \
                                 ${OMNECT_FLASH_MODE_FIFO} ${blk_dev}; bmap_ret=$?
    if [ ${bmap_ret} -eq 0 ]; then return 0; fi  # success

    # bmaptool exited with error:
    #     - mismatch between bmap file and wic image
    #     - broken destination device
    #     - broken network
    #     - usually, there is no way to salvage
    msg_fatal "bmaptool(${blk_dev}) failed: ${bmap_ret}" && return 1
}

vfat_grub_dd_workaround()
{
    local dest=${1}
    local machine_features=$(grep ^MACHINE_FEATURES= /etc/os-release | awk -F'"' '{print $2}')

    # we encountered situations where the device could not boot after
    # flash-mode-2 and could boot if flash-mode-2 did run again.
    # it also could be fixed by manually copying the to be flashed
    # grub binary bootx64.efi again. (in the error case checksums
    # of bootx64.efi on the device and in the wic image differed.)

    # ATTENTION: this workaround makes it impossible to boot it
    # flash-mode-2 is not finished, e.g. device is shutdown waiting
    # for wic.bmap and wic.xz

    if [[ " ${machine_features} " =~ " grub " ]]; then
        dd if=/dev/zero of=${dest} bs=@@OMNECT_PART_SIZE_BOOT@@K count=1
    fi

}

# deploy WIC image via network to (same) active block device
run_flash_mode_2() {
    msg "Entering omnect flashing mode 2 ..."

    # disable flash mode for subsequent restarts
    set_bootloader_env_var ${OMNECT_FLASH_MODE_VAR}

    # we already mounted /dev/omnect/boot when we're using grub. so we unmount before copying boot.
    if [ -f /usr/bin/grub-editenv ]; then
        sync
        run_cmd umount ${ROOTFS_DIR}/boot
    fi

    local dest_blk=$(readlink -f /dev/omnect/rootA)
    dest_blk=${dest_blk::-1} # can be /dev/nvme0n1p or /dev/sda
    local p=${dest_blk:0-1}
    if [ "${p}" == "p" ]; then
        dest_blk=${dest_blk::-1}
    else
        p=""
    fi

    setup_fifo || return 1
    setup_network eth0 || return 1
    vfat_grub_dd_workaround "${dest_blk}${p}1"
    run_bmap_tool || return 1

    flashmode_efi_handling ${dest_blk} ${p}

    msg "Rebooting system..."
    sync
    run_cmd reboot -f
    # -- never reached --
}

# main entry point
flash_mode_2_run() {
    add_module_post_hook on_exit
    run_flash_mode_2
    local ret=${?}
    if [ ${ret} -ne 0 ]; then
        echo flash_mode_2_run return=${ret}
        sleep 120
        return ${ret}
    else
        return 0
    fi

}
