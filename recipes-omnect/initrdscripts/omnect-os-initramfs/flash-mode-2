#!/bin/bash

#
# optionally provide flashing whole disk image in INITRAMFS context
#

# Flash Mode
#     2    flash disk image from network to active block device
#
OMNECT_FLASH_MODE=""

OMNECT_FLASH_MODE_VAR="flash-mode"
OMNECT_FLASH_MODE_FLAG_FILE="/etc/enforce_flash_mode"
OMNECT_FLASH_MODE_FIFO="/home/omnect/wic.xz"
OMNECT_FLASH_MODE_BMAP_FILE="/home/omnect/wic.bmap"

# variable templates, which are replaced at build time
OMNECT_FLASH_MODE_ETH="UNDEFINED"

# called by generic INITRAMFS
flash_mode_2_enabled() {
    debug "flash mode 2: ${OMNECT_FLASH_MODE}"

    # flag file (part of "omnect-os-initramfs-test")
    if [ -f ${OMNECT_FLASH_MODE_FLAG_FILE} ]; then
        msg "enable flash mode: by ${OMNECT_FLASH_MODE_FLAG_FILE}"
        OMNECT_FLASH_MODE=2
        return 0  # enable flash mode; call main entry point
    fi

    # flash mode triggered at runtime
    OMNECT_FLASH_MODE=$(get_bootloader_env_var ${OMNECT_FLASH_MODE_VAR})
    if [ "${OMNECT_FLASH_MODE}" == "2" ]; then
        return 0  # enable flash mode; call main entry point
    fi

    return 1  # disable flash mode; normal boot; main entry point _NOT_ called
}

setup_network() {
    local if_name="$1"
    local ip_addr=""

    # get network interface up
    while true; do
        ifconfig ${if_name} up >/dev/null 2>&1
        if [ $? -eq 0 ]; then break; fi
        msg "Waiting for ${if_name} ..."
        sleep 1
    done

    # start dhcp client; it is backgrounding in the case the IP address was assigned or timeout
    mkdir -p /tmp
    run_cmd dhcpcd ${if_name} || return 1

    # wait for IPv4 address
    while true; do
        msg "Waiting for IP address..."
        ip_addr=$(ip addr show dev ${if_name} | grep "inet " | awk '{print $2}')
        if [ -n "${ip_addr}" ]; then break; fi
        sleep 1
    done
    OMNECT_FLASH_MODE_IP_ADDR="${ip_addr%/*}"

    # setup PTY
    run_cmd mkdir -p /dev/pts || return 1
    run_cmd mount -t devpts devpts /dev/pts || return 1

    # start SSH server; generate host key on the fly
    mkdir -p /etc/dropbear
    run_cmd dropbear -R || return 1
}

run_bmap_tool() {
    local umount_dev=""
    local blk_dev=""

    # detect block device
    blk_dev=$(get_block_device boot)
    blk_dev=${blk_dev%p*}
    if [ ! -b "${blk_dev}" ]; then msg_fatal "${blk_dev} does not exist or not a block device"; return 1; fi

    # setup FIFO
    run_cmd mkfifo ${OMNECT_FLASH_MODE_FIFO} || return 1
    run_cmd chown omnect:omnect ${OMNECT_FLASH_MODE_FIFO} || return 1

    # bmap file must be copied with scp
    msg "please run  scp <your-bmap-file> omnect@${OMNECT_FLASH_MODE_IP_ADDR}:$(basename ${OMNECT_FLASH_MODE_BMAP_FILE})"
    while true; do
        if [ -f "${OMNECT_FLASH_MODE_BMAP_FILE}" ]; then break; fi
        sleep 1
    done

    # umount, if necessary
    mkdir -p /tmp
    cp /proc/mounts /tmp/all_mounts  # make snapshot
    while read x; do
        umount_dev=$(echo $x | awk '{print $1}')
        echo ${umount_dev} | grep -q "$(basename ${blk_dev})"
        if [ $? -eq 0 ]; then
            echo "umount ${umount_dev}"
            umount ${umount_dev} 2>/dev/null
        fi
    done </tmp/all_mounts

    msg "please run  scp <your-wic-image> omnect@${OMNECT_FLASH_MODE_IP_ADDR}:$(basename ${OMNECT_FLASH_MODE_FIFO})"
    export PATH
    run_cmd bmaptool copy --bmap ${OMNECT_FLASH_MODE_BMAP_FILE} \
                                 ${OMNECT_FLASH_MODE_FIFO} ${blk_dev}; RET=$?
    if [ ${RET} -eq 0 ]; then return 0; fi  # success

    # bmaptool exited with error:
    #     - mismatch between bmap file and wic image
    #     - broken destination device
    #     - broken network
    #     - usually, there is no way to salvage
    while true; do
        msg_fatal "bmaptool(${blk_dev}) failed: ${RET}"
        sleep 60
    done
}

# deploy WIC image via network to (same) active block device
run_flash_mode_2() {
    local root_a_p=""
    local machine_features=""
    msg "Entering omnect flashing mode 2 ..."

    # disable flash mode for subsequent restarts
    set_bootloader_env_var ${OMNECT_FLASH_MODE_VAR}

    if [ "${OMNECT_FLASH_MODE_ETH}" == "UNDEFINED" ]; then
        msg_fatal "missing definition OMNECT_FLASH_MODE_ETH"
        return
    fi

    setup_network ${OMNECT_FLASH_MODE_ETH} || return
    run_bmap_tool || return

    machine_features=$(grep ^MACHINE_FEATURES= /etc/os-release | awk -F'"' '{print $2}')
    if [[ " ${machine_features} " =~ " grub " ]]; then
        mkdir -p /tmp/boot
        mount /dev/omnect/boot /tmp/boot
        root_a_p=$(readlink -f /dev/omnect/rootA)
        root_a_p=${root_a_p::-1}
        sed "s#@@ROOT_DEVICE@@#${root_a_p}#g" /etc/omnect/grub.cfg.in > /tmp/boot/EFI/BOOT/grub.cfg
        umount /tmp/boot
    fi

    msg "Rebooting system..."
    sync
    reboot -f
    # -- never reached --
}

# main entry point
flash_mode_2_run() {
    run_flash_mode_2

    # continue startup in case of errors
    return 0
}
