bootloader_sh_enabled()
{
    return 1  # there is no entry point in this library
}

test_and_mount_boot()
{
    if ! mountpoint -q ${ROOTFS_DIR}/boot; then
        mkdir -p ${ROOTFS_DIR}/boot
        check_fs "boot"
        mount -t vfat /dev/omnect/boot ${ROOTFS_DIR}/boot && msg "mounted ${ROOTFS_DIR}/boot"  || return 1
    fi
}

# get value of bootloader environment variable
get_bootloader_env_var()
{
    local var_name="$1"
    test_and_mount_boot || return 1
    local value=$(grub-editenv ${ROOTFS_DIR}/boot/EFI/BOOT/grubenv list | grep \^${var_name}\= | cut -d'=' -f2)
    debug "get_bootloader_env_var ${var_name}=${value}"
    echo "${value}"
}

# set/delete bootloader environment variable
set_bootloader_env_var()
{
    local  var_name="$1"
    local var_value="$2"  # empty string to delete variable
    debug "set_bootloader_env_var" "${var_name}" "${var_value}"

    test_and_mount_boot || return 1
    if [ -n "$var_value" ];then
        grub-editenv ${ROOTFS_DIR}/boot/EFI/BOOT/grubenv set "${var_name}"="${var_value}" || return 1
    else
        grub-editenv ${ROOTFS_DIR}/boot/EFI/BOOT/grubenv unset "${var_name}" || return 1
    fi
}

save_fsck_status()
{
    local part_name="${1}"
    local source_file="${2}"
    local fsck_res="${3}"

    if [ ! "${part_name}" = "boot" ]; then
        test_and_mount_boot || return 1
        gzip -9c ${source_file} | base64 -w0 - > ${ROOTFS_DIR}/boot/fsck.${part_name}
        # umount ${ROOTFS_DIR}/boot because of recursive call by check_fs "boot"
        run_cmd umount ${ROOTFS_DIR}/boot
    elif [ ! "${fsck_res}" = "2" ]; then
        test_and_mount_boot || return 1
        set_bootloader_env_var omnect_fsck_boot $(gzip -9c ${source_file} | base64 -w0 -) || set_bootloader_env_var omnect_fsck_boot $(echo "fsck output to big" | gzip - | base64 -w0 -)
        # umount ${ROOTFS_DIR}/boot because of recursive call by check_fs "boot"
        run_cmd umount ${ROOTFS_DIR}/boot
    else
        msg "handled fsck error for boot partition; can not save fsck state"
    fi
}

get_fsck_status()
{
    local part_name="${1}"
    local return=""
    test_and_mount_boot || return 1
    if [ ! "${part_name}" = "boot" ] && [ -f ${ROOTFS_DIR}/boot/fsck.${part_name} ]; then
        return=$(base64 -d ${ROOTFS_DIR}/boot/fsck.${part_name} | zcat) || return 1
        rm ${ROOTFS_DIR}/boot/fsck.${part_name}
    else
        return=$(grub-editenv ${ROOTFS_DIR}/boot/EFI/BOOT/grubenv list | grep \^omnect_fsck_boot\= | cut -d'=' -f2 | base64 -d - | zcat - 2>/dev/null) || return 1
    fi
    echo -n "${return}"
}


rootblk_dev_generate_dev_omnect() {
    local search_rootblk=("/dev/sda" "/dev/nvme0n1p")
    local rootblk=""
    local rootpart=${bootparam_rootpart}
    local part=""

    [ -z "${bootparam_rootpart}" ] && msg "no rootpart set" && return 1

    mkdir -p /dev/omnect
    cd /dev/omnect

    # get rootblk via kernel param ... if not set, we search
    rootblk=${bootparam_rootblk}
    msg "env rootblk=${bootparam_rootblk}"
    if [ -z "${rootblk}" ]; then
        for i in "${search_rootblk[@]}"
        do
            msg "probing \"${i}${rootpart}\""
            # we wait for max 2sec - make it configurable?
            local sleep_cnt=0
            while [ ! -b "${i}${rootpart}" ] && [ ${sleep_cnt} -le 20 ]; do
                debug "waiting for \"${i}${rootpart}\""
                sleep 0.1
                sleep_cnt=$((${sleep_cnt}+1))
            done

            if [ -b "${i}${rootpart}" ]; then
                rootblk="${i}"
                msg "found \"${rootblk}\""
                break;
            fi
        done
    else
        while [ ! -b "${rootblk}1" ]; do
            debug "waiting for rootblk=${rootblk}"
            sleep 0.1
        done
    fi

    if [ ! -b ${rootblk} ]; then
        part="p"
        rootblk=${rootblk%p*}
        if [ ! -b ${rootblk} ]; then
            msg_fatal "failed to detect root blk device" && return 1
        fi
    fi

    debug part=${part}
    debug rootblk=${rootblk}

    ln -sf ${rootblk} rootblk
    ln -sf ${rootblk}${part}1 boot
    ln -sf ${rootblk}${part}2 rootA
    ln -sf ${rootblk}${part}3 rootB
    ln -sf ${rootblk}${part}${rootpart} rootCurrent
    ln -sf ${rootblk}${part}4 factory
    ln -sf ${rootblk}${part}5 cert
    ln -sf ${rootblk}${part}6 etc
    ln -sf ${rootblk}${part}7 data

    # save so next boot has bootparam_rootblk and we can skip search
    if [ -z "${bootparam_rootblk}" ]; then
        set_bootloader_env_var "omnect_rootblk" "${rootblk}${part}"
    fi
}
