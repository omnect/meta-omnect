#
# common helper functions
#

common_sh_enabled()
{
    return 1  # there is no entry point in this library
}

# - overwrites msg from initramfs-framework
# - we write to kmsg, so we can respect the kernel cmdline "quiet" argument
#   and we're able to find the initramfs output in the journal
msg() {
    echo "<6>omnect-os-initramfs: ${@}" > /dev/kmsg
}

msg_fatal() {
    echo "<2>omnect-os-initramfs: FATAL ERROR: ${@}" > /dev/kmsg
}

msg_error() {
    echo "<3>omnect-os-initramfs: ERROR: ${@}" > /dev/kmsg
}

stderr_error() {
    echo "ERROR: $@" >&2
}

stderr_fatal() {
    echo "FATAL ERROR: $@" >&2
}

run_cmd() {
    msg  "$@"
    # avoid errors with directly redirecting too long output to /dev/kmsg
    out=$(eval "$@" 2>&1)
    local result=$?
    while read l; do echo -n "$l" > /dev/kmsg; done <<<"$out"
    if [ ${result} -ne 0 ]; then msg_error "command \"$@\" failed: ${result}"; return ${result}; fi
    return 0
}

run_cmd_stdout() {
    echo "$@"
    eval "$@"
    local result=$?
    if [ ${result} -ne 0 ]; then stderr_error "command \"$@\" failed: ${result}"; return ${result}; fi
    return 0
}

# check filesystem
# re-format partition in the case of uncorrectable fsck errors or enforced flag
check_fs()
{
    local label=$1  # label
    local fsck_res=0
    local kmsg_ratelimit=$(cat /proc/sys/kernel/printk_devkmsg)

    msg "check_fs /dev/omnect/${label}"
    echo "on" > /proc/sys/kernel/printk_devkmsg

    # regular boot; fsck handles unclean state (i.e.; not unmounted)
    fsck -y /dev/omnect/${label} &> /tmp/fsck_out
    fsck_res=$?
    msg "fsck result for \"${label}\" is ${fsck_res}"
    msg "$(</tmp/fsck_out)"

    if [ ${fsck_res} -ne 0 ]; then
        save_fsck_status "${label}" "/tmp/fsck_out" "${fsck_res}"
        msg_error "command \"fsck -y /dev/omnect/${label}\" failed: ${fsck_res}"
    fi

    if [ ${fsck_res} -eq 2 ]; then
        msg "reboot indicated by fsck"
        run_cmd reboot -f
    fi

    echo ${kmsg_ratelimit} > /proc/sys/kernel/printk_devkmsg
    return 0
}

reformat_ext4_fs() {
    local path="${1}"  # filesystem
    local label="${2}"

    # -- mkfs enforced OR uncorrectable fsck errors --
    msg "reformatting ${path}  ..."
    run_cmd mkfs.ext4 -F -q ${path} || return 1

    # set ext4 label; disable enforced fsck
    run_cmd tune2fs ${path} -c -1 -i 0 -L ${label} || return 1
    run_cmd sync
}

# mount filesystem of partition
mount_partition()
{
    local  fs_type="$1"  # filesystem type
    local  blk_dev="$2"  # block device name
    local  mnt_dir="$3"  # mount point
    local mnt_opts="$4"  # mount options

    if [ -z "${blk_dev}" ] || [ ! -b "${blk_dev}" ]; then
        msg_fatal "\"${blk_dev}\" not a valid block device"
        return 1
    fi

    run_cmd mount -t "${fs_type}" -o "${mnt_opts}" "${blk_dev} " "${mnt_dir}"
    return $?
}

# mount overlay filesystem
mount_overlayfs()
{
    local lowerdir="$1"
    local upperdir="$2"
    local  workdir="$3"
    local mnt_opts="$4"  # mount options
    local  mnt_dir="$5"  # mount point

    run_cmd mount -t overlay \
                  -o ${mnt_opts},lowerdir=${lowerdir},upperdir=${upperdir},workdir=${workdir} \
                  overlay ${mnt_dir}
}

# if etc partition is empty, copy the etc dir from factory partition
setup_etc_from_factory()
{
    local rootfs_dir="$1"

    if [ ! -d "${rootfs_dir}/mnt/etc/upper" ]; then
        run_cmd mkdir -p "${rootfs_dir}/mnt/etc/upper"
        run_cmd mkdir -p "${rootfs_dir}/mnt/etc/work"
        if [ -d "${rootfs_dir}/mnt/factory/etc" ]; then
            msg "setup etc from factory partition"
            run_cmd cp -av "${rootfs_dir}/mnt/factory/etc/." "${rootfs_dir}/mnt/etc/upper"
        fi
    fi
}

umount_rootfs_partition()
{
    local rootfs_dir="$1"
    run_cmd umount "${rootfs_dir}"
}

setup_etc_partition()
{
    local     rootfs_dir="$1"
    local       mnt_opts="$2"

    msg "setup etc partition"

    # check etc partition to handle unclean (not unmounted) state
    check_fs etc

    # mount etc partition
    mount_partition "ext4" /dev/omnect/etc "${rootfs_dir}/mnt/etc" "${mnt_opts}"

    setup_etc_from_factory "${rootfs_dir}"

    # mount etc overlay
    mount_overlayfs "${rootfs_dir}/etc" "${rootfs_dir}/mnt/etc/upper" "${rootfs_dir}/mnt/etc/work" \
                    "${mnt_opts}",index=off "${rootfs_dir}/etc"
}

umount_etc_partition()
{
    local rootfs_dir="$1"

    run_cmd umount "${rootfs_dir}/etc"
    run_cmd umount "${rootfs_dir}/mnt/etc"
}

setup_data_partition()
{
    local rootfs_dir="$1"
    local   mnt_opts="$2"

    msg "setup data partition"

    # check data partition to handle unclean (not unmounted) state
    check_fs data

    # mount data partition
    mount_partition "ext4" "/dev/omnect/data" "${rootfs_dir}/mnt/data" "${mnt_opts}"

    # mount home overlay
    run_cmd mkdir -p "${rootfs_dir}/mnt/data/home/work"
    run_cmd mkdir -p "${rootfs_dir}/mnt/data/home/upper"
    run_cmd mkdir -p "${rootfs_dir}/mnt/data/var/lib"
    run_cmd mkdir -p "${rootfs_dir}/mnt/data/local"
    mount_overlayfs "${rootfs_dir}/home" "${rootfs_dir}/mnt/data/home/upper" "${rootfs_dir}/mnt/data/home/work" \
                    "${mnt_opts}",index=off "${rootfs_dir}/home"

    # bind mount /var/lib
    run_cmd mkdir -p "${rootfs_dir}/mnt/data/var/lib"
    run_cmd mount -o bind "${rootfs_dir}/mnt/data/var/lib" "${rootfs_dir}/var/lib"

    # bind mount /usr/local
    run_cmd mkdir -p "${rootfs_dir}/mnt/data/local"
    run_cmd mount -o bind "${rootfs_dir}/mnt/data/local" "${rootfs_dir}/usr/local"
}

umount_data_partition()
{
    local rootfs_dir="$1"

    run_cmd umount "${rootfs_dir}/usr/local"
    run_cmd umount "${rootfs_dir}/var/lib"
    run_cmd umount "${rootfs_dir}/home"
    run_cmd umount "${rootfs_dir}/mnt/data"
}

setup_persistent_var_log()
{
    local rootfs_dir="$1"

    if grep ^DISTRO_FEATURES ${rootfs_dir}/etc/os-release | grep -q '[" ]persistent-var-log[ "]'; then
        msg "setup persistent var log"
        run_cmd mkdir -p ${rootfs_dir}/mnt/data/log || return 1
        run_cmd mount -o bind ${rootfs_dir}/mnt/data/log ${rootfs_dir}/var/log || return 1
    fi
    return $?
}

umount_persistent_var_log()
{
    local rootfs_dir="$1"

    if grep ^DISTRO_FEATURES ${rootfs_dir}/etc/os-release | grep -q '[" ]persistent-var-log[ "]'; then
        run_cmd umount ${rootfs_dir}/var/log
    fi
}

get_partition_type()
{
    local value=$(sfdisk -l /dev/omnect/rootblk 2>&1 | grep "^Disklabel type:" | awk '{print $NF}')
    debug "get_partition_type: ${value}"
    echo ${value}
}

on_exit_debug_image()
{
    if [ "${return}" != "0" ]; then
        echo "clear" >> /tmp/debug_init
        echo "echo \"initramfs failed: ${1}\"" >> /tmp/debug_init
        /bin/bash --init-file /tmp/debug_init
    fi
}

on_exit_release_image()
{
    # todo: as soon we have failure handling in the boot process, we should reboot here.
    # for now, it would probably result in a reboot loop. so we don't.
    if [ "${return}" != "0" ]; then
        while true; do
            msg_fatal "iniramfs failed: ${1}"
            sleep 60
        done
    fi
}

on_exit()
{
    local release=$(grep ^OMNECT_RELEASE_IMAGE= /etc/os-release | awk -F'"' '{print $2}')
    if [ "${release}" = "1" ]; then
        on_exit_release_image ${2}
    else
        on_exit_debug_image ${2}
    fi
}

flash_mode_efi_handling()
{
    local dest_dev=${1}
    local p=${2}
    local machine_features=$(grep ^MACHINE_FEATURES= /etc/os-release | awk -F'"' '{print $2}')
    local boot_dev="/dev/omnect/boot"
    local ret=0

    if [ -n "${dest_dev}" ]; then
        boot_dev="${dest_dev}${p}1"
    else
        dest_dev="/dev/omnect/rootblk"
    fi

    if [[ " ${machine_features} " =~ " efi " ]]; then
        echo "Configuring efi"
        # delete all efi entries
        local efi_entries=$(efibootmgr | grep ^Boot[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]\* | awk '{print $1}')
        for i in ${efi_entries}; do
            i=${i#Boot}
            i=${i%\*}
            run_cmd_stdout efibootmgr --bootnum ${i} --delete-bootnum || return 1
        done

        run_cmd_stdout mkdir -p /tmp/boot
        run_cmd_stdout mount ${boot_dev} /tmp/boot
        run_cmd_stdout efibootmgr --create --disk ${dest_dev} --part 1 --label "omnect_os" --loader \\\\EFI\\\\BOOT\\\\bootx64.efi
        # same entry with another label ... for debug purposes, when booting after flash-mode-{1,2} fails
        run_cmd_stdout efibootmgr --create --disk ${dest_dev} --part 1 --label "omnect_os " --loader \\\\EFI\\\\BOOT\\\\bootx64.efi
        efibootmgr -v > /tmp/boot/EFI/BOOT/efibootmgr_entry
        run_cmd_stdout umount /tmp/boot
    fi
    return $ret
}

flash_mode_setup_network() {
    local if_name="$1"
    local ip_addr=""

    # get network interface up
    while true; do
        ifconfig ${if_name} up >/dev/null 2>&1
        if [ $? -eq 0 ]; then break; fi
        msg "Waiting for ${if_name} ..."
        sleep 1
    done

    # start dhcp client; it is backgrounding in the case the IP address was assigned or timeout
    run_cmd mkdir -p /tmp || return 1
    run_cmd dhcpcd ${if_name} || return 1

    # wait for IPv4 address
    while true; do
        msg "Waiting for IP address... on ${if_name}"
        ip_addr=$(ip addr show dev ${if_name} | grep "inet " | awk '{print $2}')
        if [ -n "${ip_addr}" ]; then break; fi
        sleep 1
    done
    OMNECT_FLASH_MODE_IP_ADDR="${ip_addr%/*}"

    # setup PTY
    run_cmd mkdir -p /dev/pts || return 1
    run_cmd mount -t devpts devpts /dev/pts || return 1

    # start SSH server; generate host key on the fly
    mkdir -p /etc/dropbear
    run_cmd dropbear -R || return 1
}
