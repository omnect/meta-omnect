diff --git a/scripts/lib/wic/plugins/source/bootimg-efi.py b/scripts/lib/wic/plugins/source/bootimg-efi.py
index a2b9f4c893..355cd1b417 100644
--- a/scripts/lib/wic/plugins/source/bootimg-efi.py
+++ b/scripts/lib/wic/plugins/source/bootimg-efi.py
@@ -285,67 +285,75 @@ class BootimgEFIPlugin(SourcePlugin):

         hdddir = "%s/hdd/boot" % cr_workdir

-        kernel = get_bitbake_var("KERNEL_IMAGETYPE")
-        if get_bitbake_var("INITRAMFS_IMAGE_BUNDLE") == "1":
-            if get_bitbake_var("INITRAMFS_IMAGE"):
-                kernel = "%s-%s.bin" % \
-                    (get_bitbake_var("KERNEL_IMAGETYPE"), get_bitbake_var("INITRAMFS_LINK_NAME"))
-
-        if source_params.get('create-unified-kernel-image') == "true":
-            initrd = source_params.get('initrd')
-            if not initrd:
-                raise WicError("initrd= must be specified when create-unified-kernel-image=true, exiting")
-
-            deploy_dir = get_bitbake_var("DEPLOY_DIR_IMAGE")
-            efi_stub = glob("%s/%s" % (deploy_dir, "linux*.efi.stub"))
-            if len(efi_stub) == 0:
-                raise WicError("Unified Kernel Image EFI stub not found, exiting")
-            efi_stub = efi_stub[0]
-
-            with tempfile.TemporaryDirectory() as tmp_dir:
-                label = source_params.get('label')
-                label_conf = "root=%s" % creator.rootdev
-                if label:
-                    label_conf = "LABEL=%s" % label
-
-                bootloader = creator.ks.bootloader
-                cmdline = open("%s/cmdline" % tmp_dir, "w")
-                cmdline.write("%s %s" % (label_conf, bootloader.append))
-                cmdline.close()
-
-                initrds = initrd.split(';')
-                initrd = open("%s/initrd" % tmp_dir, "wb")
-                for f in initrds:
-                    with open("%s/%s" % (deploy_dir, f), 'rb') as in_file:
-                        shutil.copyfileobj(in_file, initrd)
-                initrd.close()
-
-                # Searched by systemd-boot:
-                # https://systemd.io/BOOT_LOADER_SPECIFICATION/#type-2-efi-unified-kernel-images
-                install_cmd = "install -d %s/EFI/Linux" % hdddir
-                exec_cmd(install_cmd)
-
-                staging_dir_host = get_bitbake_var("STAGING_DIR_HOST")
-                target_sys = get_bitbake_var("TARGET_SYS")
-
-                # https://www.freedesktop.org/software/systemd/man/systemd-stub.html
-                objcopy_cmd = "%s-objcopy" % target_sys
-                objcopy_cmd += " --enable-deterministic-archives"
-                objcopy_cmd += " --preserve-dates"
-                objcopy_cmd += " --add-section .osrel=%s/usr/lib/os-release" % staging_dir_host
-                objcopy_cmd += " --change-section-vma .osrel=0x20000"
-                objcopy_cmd += " --add-section .cmdline=%s" % cmdline.name
-                objcopy_cmd += " --change-section-vma .cmdline=0x30000"
-                objcopy_cmd += " --add-section .linux=%s/%s" % (staging_kernel_dir, kernel)
-                objcopy_cmd += " --change-section-vma .linux=0x2000000"
-                objcopy_cmd += " --add-section .initrd=%s" % initrd.name
-                objcopy_cmd += " --change-section-vma .initrd=0x3000000"
-                objcopy_cmd += " %s %s/EFI/Linux/linux.efi" % (efi_stub, hdddir)
-                exec_native_cmd(objcopy_cmd, native_sysroot)
-        else:
-            install_cmd = "install -m 0644 %s/%s %s/%s" % \
-                (staging_kernel_dir, kernel, hdddir, kernel)
-            exec_cmd(install_cmd)
+        # kernel = get_bitbake_var("KERNEL_IMAGETYPE")
+        # if get_bitbake_var("INITRAMFS_IMAGE_BUNDLE") == "1":
+        #     if get_bitbake_var("INITRAMFS_IMAGE"):
+        #         kernel = "%s-%s.bin" % \
+        #             (get_bitbake_var("KERNEL_IMAGETYPE"), get_bitbake_var("INITRAMFS_LINK_NAME"))
+
+        # if source_params.get('create-unified-kernel-image') == "true":
+        #     initrd = source_params.get('initrd')
+        #     if not initrd:
+        #         raise WicError("initrd= must be specified when create-unified-kernel-image=true, exiting")
+
+        #     deploy_dir = get_bitbake_var("DEPLOY_DIR_IMAGE")
+        #     efi_stub = glob("%s/%s" % (deploy_dir, "linux*.efi.stub"))
+        #     if len(efi_stub) == 0:
+        #         raise WicError("Unified Kernel Image EFI stub not found, exiting")
+        #     efi_stub = efi_stub[0]
+
+        #     with tempfile.TemporaryDirectory() as tmp_dir:
+        #         label = source_params.get('label')
+        #         label_conf = "root=%s" % creator.rootdev
+        #         if label:
+        #             label_conf = "LABEL=%s" % label
+
+        #         bootloader = creator.ks.bootloader
+        #         cmdline = open("%s/cmdline" % tmp_dir, "w")
+        #         cmdline.write("%s %s" % (label_conf, bootloader.append))
+        #         cmdline.close()
+
+        #         initrds = initrd.split(';')
+        #         initrd = open("%s/initrd" % tmp_dir, "wb")
+        #         for f in initrds:
+        #             with open("%s/%s" % (deploy_dir, f), 'rb') as in_file:
+        #                 shutil.copyfileobj(in_file, initrd)
+        #         initrd.close()
+
+        #         # Searched by systemd-boot:
+        #         # https://systemd.io/BOOT_LOADER_SPECIFICATION/#type-2-efi-unified-kernel-images
+        #         install_cmd = "install -d %s/EFI/Linux" % hdddir
+        #         exec_cmd(install_cmd)
+
+        #         staging_dir_host = get_bitbake_var("STAGING_DIR_HOST")
+        #         target_sys = get_bitbake_var("TARGET_SYS")
+
+        #         # https://www.freedesktop.org/software/systemd/man/systemd-stub.html
+        #         objcopy_cmd = "%s-objcopy" % target_sys
+        #         objcopy_cmd += " --enable-deterministic-archives"
+        #         objcopy_cmd += " --preserve-dates"
+        #         objcopy_cmd += " --add-section .osrel=%s/usr/lib/os-release" % staging_dir_host
+        #         objcopy_cmd += " --change-section-vma .osrel=0x20000"
+        #         objcopy_cmd += " --add-section .cmdline=%s" % cmdline.name
+        #         objcopy_cmd += " --change-section-vma .cmdline=0x30000"
+        #         objcopy_cmd += " --add-section .linux=%s/%s" % (staging_kernel_dir, kernel)
+        #         objcopy_cmd += " --change-section-vma .linux=0x2000000"
+        #         objcopy_cmd += " --add-section .initrd=%s" % initrd.name
+        #         objcopy_cmd += " --change-section-vma .initrd=0x3000000"
+        #         objcopy_cmd += " %s %s/EFI/Linux/linux.efi" % (efi_stub, hdddir)
+        #         exec_native_cmd(objcopy_cmd, native_sysroot)
+        # else:
+        #     install_cmd = "install -m 0644 %s/%s %s/%s" % \
+        #         (staging_kernel_dir, kernel, hdddir, kernel)
+        #     exec_cmd(install_cmd)
+
+        # install grubenv file
+        omnect_grubenv_file = get_bitbake_var("OMNECT_GRUBENV_FILE")
+        grubenv_install_cmd = "install -m 0644 -D %s %s/EFI/BOOT/grubenv" % (omnect_grubenv_file, hdddir)
+        exec_cmd(grubenv_install_cmd)
+        deploy_dir_img = get_bitbake_var("DEPLOY_DIR_IMAGE")
+        bootloader_version_install_cmd = "install -m 0644 -D %s/omnect_bootloader_version %s/EFI/BOOT/omnect_bootloader_version" % (deploy_dir_img, hdddir)
+        exec_cmd(bootloader_version_install_cmd)

         if get_bitbake_var("IMAGE_EFI_BOOT_FILES"):
             for src_path, dst_path in cls.install_task:
diff --git a/meta/classes/cargo_common.bbclass b/meta/classes/cargo_common.bbclass
index c1bc142d85..362498610d 100644
--- a/meta/classes/cargo_common.bbclass
+++ b/meta/classes/cargo_common.bbclass
@@ -31,12 +31,12 @@ CARGO_RUST_TARGET_CCLD ?= "${RUST_TARGET_CCLD}"
 cargo_common_do_configure () {
 	mkdir -p ${CARGO_HOME}/bitbake
 
-	cat <<- EOF > ${CARGO_HOME}/config
-	# EXTRA_OECARGO_PATHS
-	paths = [
-	$(for p in ${EXTRA_OECARGO_PATHS}; do echo \"$p\",; done)
-	]
-	EOF
+	# cat <<- EOF > ${CARGO_HOME}/config
+	# # EXTRA_OECARGO_PATHS
+	# paths = [
+	# $(for p in ${EXTRA_OECARGO_PATHS}; do echo \"$p\",; done)
+	# ]
+	# EOF
 
 	cat <<- EOF >> ${CARGO_HOME}/config
 
diff --git a/meta/classes/image.bbclass b/meta/classes/image.bbclass
index 00413d56d1..cef10c5fde 100644
--- a/meta/classes/image.bbclass
+++ b/meta/classes/image.bbclass
@@ -529,27 +529,27 @@ def get_rootfs_size(d):
     size_kb = oe.utils.directory_size(d.getVar("IMAGE_ROOTFS")) / 1024

     base_size = size_kb * overhead_factor
-    bb.debug(1, '%f = %d * %f' % (base_size, size_kb, overhead_factor))
+    bb.verbnote('%f = %d * %f' % (base_size, size_kb, overhead_factor))
     base_size2 = max(base_size, rootfs_req_size) + rootfs_extra_space
-    bb.debug(1, '%f = max(%f, %d)[%f] + %d' % (base_size2, base_size, rootfs_req_size, max(base_size, rootfs_req_size), rootfs_extra_space))
+    bb.verbnote('%f = max(%f, %d)[%f] + %d' % (base_size2, base_size, rootfs_req_size, max(base_size, rootfs_req_size), rootfs_extra_space))

     base_size = base_size2
     if base_size != int(base_size):
         base_size = int(base_size + 1)
     else:
         base_size = int(base_size)
-    bb.debug(1, '%f = int(%f)' % (base_size, base_size2))
+    bb.verbnote('%f = int(%f)' % (base_size, base_size2))

     base_size_saved = base_size
     base_size += rootfs_alignment - 1
     base_size -= base_size % rootfs_alignment
-    bb.debug(1, '%d = aligned(%d)' % (base_size, base_size_saved))
+    bb.verbnote('%d = aligned(%d) [max: %d]' % (base_size, base_size_saved, int(rootfs_maxsize)))

     # Do not check image size of the debugfs image. This is not supposed
     # to be deployed, etc. so it doesn't make sense to limit the size
     # of the debug.
     if (d.getVar('IMAGE_BUILDING_DEBUGFS') or "") == "true":
-        bb.debug(1, 'returning debugfs size %d' % (base_size))
+        bb.verbnote('returning debugfs size %d' % (base_size))
         return base_size

     # Check the rootfs size against IMAGE_ROOTFS_MAXSIZE (if set)
diff --git a/meta/conf/layer.conf b/meta/conf/layer.conf
index 1f329c3efe..f906531327 100644
--- a/meta/conf/layer.conf
+++ b/meta/conf/layer.conf
@@ -123,3 +123,5 @@ SSTATE_EXCLUDEDEPS_SYSROOT += ".*->autoconf-archive-native"
 # Avoid empty path entries
 BITBAKEPATH := "${@os.path.dirname(bb.utils.which(d.getVar('PATH'),'bitbake'))}"
 PATH := "${@'${BITBAKEPATH}:' if '${BITBAKEPATH}' != '' else ''}${HOSTTOOLS_DIR}"
+
+LAYERDIR_core = "${LAYERDIR}"
