diff --git a/scripts/lib/wic/plugins/source/bootimg-efi.py b/scripts/lib/wic/plugins/source/bootimg-efi.py
index 13a9cddf4e..6095c7cc75 100644
--- a/scripts/lib/wic/plugins/source/bootimg-efi.py
+++ b/scripts/lib/wic/plugins/source/bootimg-efi.py
@@ -297,113 +297,121 @@ class BootimgEFIPlugin(SourcePlugin):
 
         hdddir = "%s/hdd/boot" % cr_workdir
 
-        kernel = get_bitbake_var("KERNEL_IMAGETYPE")
-        if get_bitbake_var("INITRAMFS_IMAGE_BUNDLE") == "1":
-            if get_bitbake_var("INITRAMFS_IMAGE"):
-                kernel = "%s-%s.bin" % \
-                    (get_bitbake_var("KERNEL_IMAGETYPE"), get_bitbake_var("INITRAMFS_LINK_NAME"))
-
-        if source_params.get('create-unified-kernel-image') == "true":
-            initrd = source_params.get('initrd')
-            if not initrd:
-                raise WicError("initrd= must be specified when create-unified-kernel-image=true, exiting")
-
-            deploy_dir = get_bitbake_var("DEPLOY_DIR_IMAGE")
-            efi_stub = glob("%s/%s" % (deploy_dir, "linux*.efi.stub"))
-            if len(efi_stub) == 0:
-                raise WicError("Unified Kernel Image EFI stub not found, exiting")
-            efi_stub = efi_stub[0]
-
-            with tempfile.TemporaryDirectory() as tmp_dir:
-                label = source_params.get('label')
-                label_conf = "root=%s" % creator.rootdev
-                if label:
-                    label_conf = "LABEL=%s" % label
-
-                bootloader = creator.ks.bootloader
-                cmdline = open("%s/cmdline" % tmp_dir, "w")
-                cmdline.write("%s %s" % (label_conf, bootloader.append))
-                cmdline.close()
-
-                initrds = initrd.split(';')
-                initrd = open("%s/initrd" % tmp_dir, "wb")
-                for f in initrds:
-                    with open("%s/%s" % (deploy_dir, f), 'rb') as in_file:
-                        shutil.copyfileobj(in_file, initrd)
-                initrd.close()
-
-                # Searched by systemd-boot:
-                # https://systemd.io/BOOT_LOADER_SPECIFICATION/#type-2-efi-unified-kernel-images
-                install_cmd = "install -d %s/EFI/Linux" % hdddir
-                exec_cmd(install_cmd)
-
-                staging_dir_host = get_bitbake_var("STAGING_DIR_HOST")
-                target_sys = get_bitbake_var("TARGET_SYS")
-
-                objdump_cmd = "%s-objdump" % target_sys
-                objdump_cmd += " -p %s" % efi_stub
-                objdump_cmd += " | awk '{ if ($1 == \"SectionAlignment\"){print $2} }'"
-
-                ret, align_str = exec_native_cmd(objdump_cmd, native_sysroot)
-                align = int(align_str, 16)
-
-                objdump_cmd = "%s-objdump" % target_sys
-                objdump_cmd += " -h %s | tail -2" % efi_stub
-                ret, output = exec_native_cmd(objdump_cmd, native_sysroot)
-
-                offset = int(output.split()[2], 16) + int(output.split()[3], 16)
-
-                osrel_off = offset + align - offset % align
-                osrel_path = "%s/usr/lib/os-release" % staging_dir_host
-                osrel_sz = os.stat(osrel_path).st_size
-
-                cmdline_off = osrel_off + osrel_sz
-                cmdline_off = cmdline_off + align - cmdline_off % align
-                cmdline_sz = os.stat(cmdline.name).st_size
-
-                dtb_off = cmdline_off + cmdline_sz
-                dtb_off = dtb_off + align - dtb_off % align
-
-                dtb = source_params.get('dtb')
-                if dtb:
-                    if ';' in dtb:
-                        raise WicError("Only one DTB supported, exiting")
-                    dtb_path = "%s/%s" % (deploy_dir, dtb)
-                    dtb_params = '--add-section .dtb=%s --change-section-vma .dtb=0x%x' % \
-                            (dtb_path, dtb_off)
-                    linux_off = dtb_off + os.stat(dtb_path).st_size
-                    linux_off = linux_off + align - linux_off % align
-                else:
-                    dtb_params = ''
-                    linux_off = dtb_off
-
-                linux_path = "%s/%s" % (staging_kernel_dir, kernel)
-                linux_sz = os.stat(linux_path).st_size
-
-                initrd_off = linux_off + linux_sz
-                initrd_off = initrd_off + align - initrd_off % align
-
-                # https://www.freedesktop.org/software/systemd/man/systemd-stub.html
-                objcopy_cmd = "%s-objcopy" % target_sys
-                objcopy_cmd += " --enable-deterministic-archives"
-                objcopy_cmd += " --preserve-dates"
-                objcopy_cmd += " --add-section .osrel=%s" % osrel_path
-                objcopy_cmd += " --change-section-vma .osrel=0x%x" % osrel_off
-                objcopy_cmd += " --add-section .cmdline=%s" % cmdline.name
-                objcopy_cmd += " --change-section-vma .cmdline=0x%x" % cmdline_off
-                objcopy_cmd += dtb_params
-                objcopy_cmd += " --add-section .linux=%s" % linux_path
-                objcopy_cmd += " --change-section-vma .linux=0x%x" % linux_off
-                objcopy_cmd += " --add-section .initrd=%s" % initrd.name
-                objcopy_cmd += " --change-section-vma .initrd=0x%x" % initrd_off
-                objcopy_cmd += " %s %s/EFI/Linux/linux.efi" % (efi_stub, hdddir)
-
-                exec_native_cmd(objcopy_cmd, native_sysroot)
-        else:
-            if source_params.get('install-kernel-into-boot-dir') != 'false':
-                install_cmd = "install -m 0644 %s/%s %s/%s" % \
-                    (staging_kernel_dir, kernel, hdddir, kernel)
-                exec_cmd(install_cmd)
+        # kernel = get_bitbake_var("KERNEL_IMAGETYPE")
+        # if get_bitbake_var("INITRAMFS_IMAGE_BUNDLE") == "1":
+        #     if get_bitbake_var("INITRAMFS_IMAGE"):
+        #         kernel = "%s-%s.bin" % \
+        #             (get_bitbake_var("KERNEL_IMAGETYPE"), get_bitbake_var("INITRAMFS_LINK_NAME"))
+
+        # if source_params.get('create-unified-kernel-image') == "true":
+        #     initrd = source_params.get('initrd')
+        #     if not initrd:
+        #         raise WicError("initrd= must be specified when create-unified-kernel-image=true, exiting")
+
+        #     deploy_dir = get_bitbake_var("DEPLOY_DIR_IMAGE")
+        #     efi_stub = glob("%s/%s" % (deploy_dir, "linux*.efi.stub"))
+        #     if len(efi_stub) == 0:
+        #         raise WicError("Unified Kernel Image EFI stub not found, exiting")
+        #     efi_stub = efi_stub[0]
+
+        #     with tempfile.TemporaryDirectory() as tmp_dir:
+        #         label = source_params.get('label')
+        #         label_conf = "root=%s" % creator.rootdev
+        #         if label:
+        #             label_conf = "LABEL=%s" % label
+
+        #         bootloader = creator.ks.bootloader
+        #         cmdline = open("%s/cmdline" % tmp_dir, "w")
+        #         cmdline.write("%s %s" % (label_conf, bootloader.append))
+        #         cmdline.close()
+
+        #         initrds = initrd.split(';')
+        #         initrd = open("%s/initrd" % tmp_dir, "wb")
+        #         for f in initrds:
+        #             with open("%s/%s" % (deploy_dir, f), 'rb') as in_file:
+        #                 shutil.copyfileobj(in_file, initrd)
+        #         initrd.close()
+
+        #         # Searched by systemd-boot:
+        #         # https://systemd.io/BOOT_LOADER_SPECIFICATION/#type-2-efi-unified-kernel-images
+        #         install_cmd = "install -d %s/EFI/Linux" % hdddir
+        #         exec_cmd(install_cmd)
+
+        #         staging_dir_host = get_bitbake_var("STAGING_DIR_HOST")
+        #         target_sys = get_bitbake_var("TARGET_SYS")
+
+        #         objdump_cmd = "%s-objdump" % target_sys
+        #         objdump_cmd += " -p %s" % efi_stub
+        #         objdump_cmd += " | awk '{ if ($1 == \"SectionAlignment\"){print $2} }'"
+
+        #         ret, align_str = exec_native_cmd(objdump_cmd, native_sysroot)
+        #         align = int(align_str, 16)
+
+        #         objdump_cmd = "%s-objdump" % target_sys
+        #         objdump_cmd += " -h %s | tail -2" % efi_stub
+        #         ret, output = exec_native_cmd(objdump_cmd, native_sysroot)
+
+        #         offset = int(output.split()[2], 16) + int(output.split()[3], 16)
+
+        #         osrel_off = offset + align - offset % align
+        #         osrel_path = "%s/usr/lib/os-release" % staging_dir_host
+        #         osrel_sz = os.stat(osrel_path).st_size
+
+        #         cmdline_off = osrel_off + osrel_sz
+        #         cmdline_off = cmdline_off + align - cmdline_off % align
+        #         cmdline_sz = os.stat(cmdline.name).st_size
+
+        #         dtb_off = cmdline_off + cmdline_sz
+        #         dtb_off = dtb_off + align - dtb_off % align
+
+        #         dtb = source_params.get('dtb')
+        #         if dtb:
+        #             if ';' in dtb:
+        #                 raise WicError("Only one DTB supported, exiting")
+        #             dtb_path = "%s/%s" % (deploy_dir, dtb)
+        #             dtb_params = '--add-section .dtb=%s --change-section-vma .dtb=0x%x' % \
+        #                     (dtb_path, dtb_off)
+        #             linux_off = dtb_off + os.stat(dtb_path).st_size
+        #             linux_off = linux_off + align - linux_off % align
+        #         else:
+        #             dtb_params = ''
+        #             linux_off = dtb_off
+
+        #         linux_path = "%s/%s" % (staging_kernel_dir, kernel)
+        #         linux_sz = os.stat(linux_path).st_size
+
+        #         initrd_off = linux_off + linux_sz
+        #         initrd_off = initrd_off + align - initrd_off % align
+
+        #         # https://www.freedesktop.org/software/systemd/man/systemd-stub.html
+        #         objcopy_cmd = "%s-objcopy" % target_sys
+        #         objcopy_cmd += " --enable-deterministic-archives"
+        #         objcopy_cmd += " --preserve-dates"
+        #         objcopy_cmd += " --add-section .osrel=%s" % osrel_path
+        #         objcopy_cmd += " --change-section-vma .osrel=0x%x" % osrel_off
+        #         objcopy_cmd += " --add-section .cmdline=%s" % cmdline.name
+        #         objcopy_cmd += " --change-section-vma .cmdline=0x%x" % cmdline_off
+        #         objcopy_cmd += dtb_params
+        #         objcopy_cmd += " --add-section .linux=%s" % linux_path
+        #         objcopy_cmd += " --change-section-vma .linux=0x%x" % linux_off
+        #         objcopy_cmd += " --add-section .initrd=%s" % initrd.name
+        #         objcopy_cmd += " --change-section-vma .initrd=0x%x" % initrd_off
+        #         objcopy_cmd += " %s %s/EFI/Linux/linux.efi" % (efi_stub, hdddir)
+
+        #         exec_native_cmd(objcopy_cmd, native_sysroot)
+        # else:
+        #     if source_params.get('install-kernel-into-boot-dir') != 'false':
+        #         install_cmd = "install -m 0644 %s/%s %s/%s" % \
+        #             (staging_kernel_dir, kernel, hdddir, kernel)
+        #         exec_cmd(install_cmd)
+
+        # install grubenv file
+        omnect_grubenv_file = get_bitbake_var("OMNECT_GRUBENV_FILE")
+        grubenv_install_cmd = "install -m 0644 -D %s %s/EFI/BOOT/grubenv" % (omnect_grubenv_file, hdddir)
+        exec_cmd(grubenv_install_cmd)
+        deploy_dir_img = get_bitbake_var("DEPLOY_DIR_IMAGE")
+        bootloader_version_install_cmd = "install -m 0644 -D %s/omnect_bootloader_version %s/EFI/BOOT/omnect_bootloader_version" % (deploy_dir_img, hdddir)
+        exec_cmd(bootloader_version_install_cmd)
 
         if get_bitbake_var("IMAGE_EFI_BOOT_FILES"):
             for src_path, dst_path in cls.install_task:
diff --git a/meta/conf/layer.conf b/meta/conf/layer.conf
index efbf2610f9..330c964f87 100644
--- a/meta/conf/layer.conf
+++ b/meta/conf/layer.conf
@@ -132,3 +132,5 @@ PATH := "${@'${BITBAKEPATH}:' if '${BITBAKEPATH}' != '' else ''}${HOSTTOOLS_DIR}
 BB_GLOBAL_PYMODULES = "os sys time"
 
 addpylib ${LAYERDIR}/lib oe
+
+LAYERDIR_core = "${LAYERDIR}"
diff --git a/meta/classes-recipe/rust-target-config.bbclass b/meta/classes-recipe/rust-target-config.bbclass
index 1bd7626bd8..84efa67bc8 100644
--- a/meta/classes-recipe/rust-target-config.bbclass
+++ b/meta/classes-recipe/rust-target-config.bbclass
@@ -127,7 +127,7 @@ def llvm_features(d):
 llvm_features[vardepvalue] = "${@llvm_features(d)}"
 
 ## arm-unknown-linux-gnueabihf
-DATA_LAYOUT[arm-eabi] = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
+DATA_LAYOUT[arm-eabi] = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
 TARGET_ENDIAN[arm-eabi] = "little"
 TARGET_POINTER_WIDTH[arm-eabi] = "32"
 TARGET_C_INT_WIDTH[arm-eabi] = "32"
@@ -135,7 +135,7 @@ MAX_ATOMIC_WIDTH[arm-eabi] = "64"
 FEATURES[arm-eabi] = "+v6,+vfp2"
 
 ## armv7-unknown-linux-gnueabihf
-DATA_LAYOUT[armv7-eabi] = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
+DATA_LAYOUT[armv7-eabi] = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
 TARGET_ENDIAN[armv7-eabi] = "little"
 TARGET_POINTER_WIDTH[armv7-eabi] = "32"
 TARGET_C_INT_WIDTH[armv7-eabi] = "32"
@@ -143,14 +143,14 @@ MAX_ATOMIC_WIDTH[armv7-eabi] = "64"
 FEATURES[armv7-eabi] = "+v7,+vfp2,+thumb2"
 
 ## aarch64-unknown-linux-{gnu, musl}
-DATA_LAYOUT[aarch64] = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
+DATA_LAYOUT[aarch64] = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32"
 TARGET_ENDIAN[aarch64] = "little"
 TARGET_POINTER_WIDTH[aarch64] = "64"
 TARGET_C_INT_WIDTH[aarch64] = "32"
 MAX_ATOMIC_WIDTH[aarch64] = "128"
 
 ## x86_64-unknown-linux-{gnu, musl}
-DATA_LAYOUT[x86_64] = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
+DATA_LAYOUT[x86_64] = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
 TARGET_ENDIAN[x86_64] = "little"
 TARGET_POINTER_WIDTH[x86_64] = "64"
 TARGET_C_INT_WIDTH[x86_64] = "32"
@@ -396,6 +396,10 @@ def rust_gen_target(d, thing, wd, arch):
     tspec['position-independent-executables'] = True
     tspec['panic-strategy'] = d.getVar("RUST_PANIC_STRATEGY")
 
+    # fix for: "Error loading target specification: ARM targets must set `llvm-floatabi` to `hard` or `soft`."
+    if "arm" in tspec['arch']:
+        tspec['llvm-floatabi'] = d.getVar('TARGET_FPU')
+
     # write out the target spec json file
     with open(wd + rustsys + '.json', 'w') as f:
         json.dump(tspec, f, indent=4)
@@ -403,7 +407,7 @@ def rust_gen_target(d, thing, wd, arch):
 # These are accounted for in tmpdir path names so don't need to be in the task sig
 rust_gen_target[vardepsexclude] += "ABIEXTENSION llvm_cpu"
 
-do_rust_gen_targets[vardeps] += "DATA_LAYOUT TARGET_ENDIAN TARGET_POINTER_WIDTH TARGET_C_INT_WIDTH MAX_ATOMIC_WIDTH FEATURES"
+do_rust_gen_targets[vardeps] += "DATA_LAYOUT TARGET_ENDIAN TARGET_POINTER_WIDTH TARGET_C_INT_WIDTH MAX_ATOMIC_WIDTH FEATURES LLVM_TARGET"
 
 RUST_TARGETS_DIR = "${WORKDIR}/rust-targets/"
 export RUST_TARGET_PATH = "${RUST_TARGETS_DIR}"
