diff --git a/http-common/src/server.rs b/http-common/src/server.rs
index fb4de97f..2bdf3474 100644
--- a/http-common/src/server.rs
+++ b/http-common/src/server.rs
@@ -111,22 +111,19 @@ macro_rules! make_service {
                                             let body = if body.len() == 0 {
                                                 None
                                             } else {
-                                                let content_type = headers.get(hyper::header::CONTENT_TYPE).and_then(|value| value.to_str().ok());
-
-                                                match content_type.as_deref() {
-                                                    Some("application/json") | None => {
-                                                        let body: <$route as http_common::server::Route>::DeleteBody = match serde_json::from_slice(&body) {
-                                                            Ok(body) => body,
-                                                            Err(err) => return Ok((http_common::server::Error {
-                                                                status_code: http::StatusCode::UNPROCESSABLE_ENTITY,
-                                                                message: http_common::server::error_to_message(&err).into(),
-                                                            }).to_http_response()),
-                                                        };
-
-                                                        Some(body)
-                                                    },
-                                                    _ => None,
-                                                }
+                                            let content_type = headers.get(hyper::header::CONTENT_TYPE).and_then(|value| value.to_str().ok());
+                                            if content_type.map_or(true, |ctype| ctype.split(';').next().expect("split always returns at least one element").trim() == "application/json") {
+                                                let body: <$route as http_common::server::Route>::DeleteBody = match serde_json::from_slice(&body) {
+                                                    Ok(body) => body,
+                                                    Err(err) => return Ok((http_common::server::Error {
+                                                        status_code: http::StatusCode::UNPROCESSABLE_ENTITY,
+                                                        message: http_common::server::error_to_message(&err).into(),
+                                                    }).to_http_response()),
+                                                };
+                                                Some(body)
+                                            } else {
+                                                None
+                                            }
                                             };

                                             match <$route as http_common::server::Route>::delete(route, body).await {
@@ -159,21 +156,18 @@ macro_rules! make_service {
                                                 None
                                             } else {
                                                 let content_type = headers.get(hyper::header::CONTENT_TYPE).and_then(|value| value.to_str().ok());
-                                                match content_type.as_deref() {
-                                                    Some("application/json") | None => {
-
-
-                                                        let body: <$route as http_common::server::Route>::PostBody = match serde_json::from_slice(&body) {
-                                                            Ok(body) => body,
-                                                            Err(err) => return Ok((http_common::server::Error {
-                                                                status_code: http::StatusCode::UNPROCESSABLE_ENTITY,
-                                                                message: http_common::server::error_to_message(&err).into(),
-                                                            }).to_http_response()),
-                                                        };
+                                                if content_type.map_or(true, |ctype| ctype.split(';').next().expect("split always returns at least one element").trim() == "application/json") {
+                                                    let body: <$route as http_common::server::Route>::PostBody = match serde_json::from_slice(&body) {
+                                                        Ok(body) => body,
+                                                        Err(err) => return Ok((http_common::server::Error {
+                                                            status_code: http::StatusCode::UNPROCESSABLE_ENTITY,
+                                                            message: http_common::server::error_to_message(&err).into(),
+                                                        }).to_http_response()),
+                                                    };

-                                                        Some(body)
-                                                    },
-                                                    _ => None,
+                                                    Some(body)
+                                                } else {
+                                                    None
                                                 }
                                             };

@@ -185,36 +179,34 @@ macro_rules! make_service {

                                         http::Method::PUT => {
                                             let content_type = headers.get(hyper::header::CONTENT_TYPE).and_then(|value| value.to_str().ok());
-                                            let body = match content_type.as_deref() {
-                                                Some("application/json") | None => {
-                                                    let body = match tokio::time::timeout(HYPER_REQUEST_TIMEOUT, hyper::body::to_bytes(body)).await {
-                                                        Ok(Ok(body)) => body,
-                                                        Ok(Err(err)) => return Ok((http_common::server::Error {
-                                                            status_code: http::StatusCode::BAD_REQUEST,
-                                                            message: http_common::server::error_to_message(&err).into(),
-                                                        }).to_http_response()),
-                                                        Err(timeout_err) => return Ok((http_common::server::Error {
-                                                            status_code: http::StatusCode::REQUEST_TIMEOUT,
-                                                            message: http_common::server::error_to_message(&timeout_err).into(),
-                                                        }).to_http_response()),
-                                                    };
-
-                                                    let body: <$route as http_common::server::Route>::PutBody = match serde_json::from_slice(&body) {
-                                                        Ok(body) => body,
-                                                        Err(err) => return Ok((http_common::server::Error {
-                                                            status_code: http::StatusCode::UNPROCESSABLE_ENTITY,
-                                                            message: http_common::server::error_to_message(&err).into(),
-                                                        }).to_http_response()),
-                                                    };
-
-                                                    body
-                                                },
-                                                _ => {
-                                                    return Ok((http_common::server::Error {
-                                                        status_code: http::StatusCode::UNSUPPORTED_MEDIA_TYPE,
-                                                        message: "request body must be application/json".into(),
-                                                    }).to_http_response());
-                                                },
+                                            let body = if content_type.map_or(true, |ctype| ctype.split(';').next().expect("split always returns at least one element").trim() == "application/json") {
+                                                let body = match tokio::time::timeout(HYPER_REQUEST_TIMEOUT, hyper::body::to_bytes(body)).await {
+                                                    Ok(Ok(body)) => body,
+                                                    Ok(Err(err)) => return Ok((http_common::server::Error {
+                                                        status_code: http::StatusCode::BAD_REQUEST,
+                                                        message: http_common::server::error_to_message(&err).into(),
+                                                    }).to_http_response()),
+                                                    Err(timeout_err) => return Ok((http_common::server::Error {
+                                                        status_code: http::StatusCode::REQUEST_TIMEOUT,
+                                                        message: http_common::server::error_to_message(&timeout_err).into(),
+                                                    }).to_http_response()),
+                                                };
+
+                                                let body: <$route as http_common::server::Route>::PutBody = match serde_json::from_slice(&body) {
+                                                    Ok(body) => body,
+                                                    Err(err) => return Ok((http_common::server::Error {
+                                                        status_code: http::StatusCode::UNPROCESSABLE_ENTITY,
+                                                        message: http_common::server::error_to_message(&err).into(),
+                                                    }).to_http_response()),
+                                                };
+
+                                                body
+                                            }
+                                            else {
+                                                return Ok((http_common::server::Error {
+                                                    status_code: http::StatusCode::UNSUPPORTED_MEDIA_TYPE,
+                                                    message: "request body must be application/json".into(),
+                                                }).to_http_response());
                                             };

                                             match <$route as http_common::server::Route>::put(route, body).await {
