#!/bin/sh

fs_mount_enabled() {
    return 0
}

fs_mount_run() {
    local bootpart=""

    if [ -z "${ROOTFS_DIR}" ]; then
        fatal "no ROOTFS_DIR"
        return 1
    fi

    bootpart=$(get_bootloader_env_var "bootpart")
    msg "ics-dm-os initramfs fs mount [bootpart=${bootpart}]"

    # currently we can not boot root via label and have to get the root dev
    # ourselves.
    # reason: on first boot you have the labels: rootA, rootB where rootB is an
    # empty partition. on the boot after the first update, you have only
    # label rootA, the label rootB disappeared, because adu-swupdate.sh doesnt
    # set a e2fs label. After a second update you don't have a root partition
    # with a label anymore.

    # get mmcblk at runtime, so we can boot devices which can switch between
    # emmc and sdcard with the same image.
    boot_blk=$(get_block_device boot)
    mmcblk=${boot_blk##*/}
    mmcblk=${mmcblk%p*};

    # the comma separated option list is ordered; i.e., higher preference at the right hand side
    mnt_opts_default="defaults,noatime,nodiratime,async"

    # mount rootfs
    rootfs=/dev/${mmcblk}p${bootpart}
    mount_partition "ext4" ${rootfs} ${ROOTFS_DIR} "${mnt_opts_default},ro"

    # load overlay kernelmodule
    if [ -f ${ROOTFS_DIR}/lib/modules/$(uname -r)/kernel/fs/overlayfs/overlay.ko  ]; then
        insmod ${ROOTFS_DIR}/lib/modules/$(uname -r)/kernel/fs/overlayfs/overlay.ko
    fi

    # mount cert
    cert_blk=$(get_block_device cert)
    check_ext4_fs "cert" "${cert_blk}" 0
    mount_partition "ext4" "${cert_blk}" "${ROOTFS_DIR}/mnt/cert" "${mnt_opts_default},rw"
    mkdir -p ${ROOTFS_DIR}/mnt/cert/ca
    mkdir -p ${ROOTFS_DIR}/mnt/cert/priv

    # mount etc partition
    etc_blk=$(get_block_device etc)
    check_ext4_fs "etc" "${etc_blk}" 0
    mount_partition "ext4" "${etc_blk}" "${ROOTFS_DIR}/mnt/etc" "${mnt_opts_default},rw"

    # mount factory
    factory_blk=$(get_block_device factory)
    mount_partition "ext4" "${factory_blk}" "${ROOTFS_DIR}/mnt/factory" "${mnt_opts_default},ro"

    # if etc partition is empty we copy the etc dir from factory partition
    if [ ! -d ${ROOTFS_DIR}/mnt/etc/upper ]; then
        mkdir -p ${ROOTFS_DIR}/mnt/etc/upper
        mkdir -p ${ROOTFS_DIR}/mnt/etc/work
        if [ -d ${ROOTFS_DIR}/mnt/factory/etc ]; then
            cp -rfp ${ROOTFS_DIR}/mnt/factory/etc/. ${ROOTFS_DIR}/mnt/etc/upper
        fi
    fi

    # mount etc overlay
    mount_overlayfs "${ROOTFS_DIR}/etc" "${ROOTFS_DIR}/mnt/etc/upper" "${ROOTFS_DIR}/mnt/etc/work" \
                    "${mnt_opts_default}" ${ROOTFS_DIR}/etc

    # check data partition to handle unclean (not unmounted) state
    data_blk=$(get_block_device data)
    check_ext4_fs "data" "${data_blk}" 0

    # mount data partition
    #     mount flags can be optionally set via u-boot environment
    data_opts=$(get_bootloader_env_var "data-mount-options")
    if [ -n "${data_opts}" ]; then
        msg "note, bootloader variable data-mount-options set; going to use it"
    else
        data_opts="${mnt_opts_default},rw"
    fi
    mount_partition "ext4" "${data_blk}" "${ROOTFS_DIR}/mnt/data" "${data_opts}"
    mkdir -p ${ROOTFS_DIR}/mnt/data/home/work
    mkdir -p ${ROOTFS_DIR}/mnt/data/home/upper
    mkdir -p ${ROOTFS_DIR}/mnt/data/var/lib
    mkdir -p ${ROOTFS_DIR}/mnt/data/local

    # mount home overlay
    mount_overlayfs "${ROOTFS_DIR}/home" "${ROOTFS_DIR}/mnt/data/home/upper" "${ROOTFS_DIR}/mnt/data/home/work" \
                    "${data_opts}" "${ROOTFS_DIR}/home"

    # bind mount /var/lib
    mkdir -p ${ROOTFS_DIR}/mnt/data/var/lib
    mount -o bind ${ROOTFS_DIR}/mnt/data/var/lib ${ROOTFS_DIR}/var/lib

    # bind mount /usr/local
    mkdir -p ${ROOTFS_DIR}/mnt/data/local
    mount -o bind ${ROOTFS_DIR}/mnt/data/local ${ROOTFS_DIR}/usr/local

    # mount tmpfs
    mount -t tmpfs -o mode=0755,nodev,nosuid,strictatime tmpfs  ${ROOTFS_DIR}/run
    mount -t tmpfs -o defaults tmpfs  ${ROOTFS_DIR}/var/volatile
}
