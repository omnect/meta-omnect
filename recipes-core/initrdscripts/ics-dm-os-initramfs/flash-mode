#!/bin/sh

#
# optionally provide flashing whole disk image in INITRAMFS context
#

ICS_DM_FLASH_MODE_VAR="flash-mode"
ICS_DM_FLASH_MODE_FLAG_FILE="/etc/enforce_flash_mode"
ICS_DM_FLASH_MODE_ETH="eth0"
ICS_DM_FLASH_MODE_FIFO="/home/ics-dm/wic.xz"
ICS_DM_FLASH_MODE_BMAP_FILE="/home/ics-dm/wic.bmap"

# called by generic INITRAMFS
flash_mode_enabled() {
    local flash_mode=""

    # flash mode fixed part of the initramfs image
    if [ -f ${ICS_DM_FLASH_MODE_FLAG_FILE} ]; then
        msg "enable flash mode: by ${ICS_DM_FLASH_MODE_FLAG_FILE}"
        return 0  # enable flash mode; main entry point called
    fi

    # flash mode triggered at runtime
    flash_mode=$(get_bootloader_env_var ${ICS_DM_FLASH_MODE_VAR})
    if [ "${flash_mode}" == "1" ]; then
        msg "enable flash mode: by u-boot environment variable ${ICS_DM_FLASH_MODE_VAR}"
        return 0  # enable flash mode; main entry point called
    fi

    return 1  # disable flash mode; normal boot; main entry point _NOT_ called
}

setup_network() {
    local if_name="$1"
    local ip_addr=""

    # get network interface up
    while true; do
        ifconfig ${if_name} up >/dev/null 2>&1
        if [ $? -eq 0 ]; then break; fi
        msg "Waiting for ${if_name} ..."
        sleep 1
    done

    # start dhcp client; it is backgrounding in the case the IP address was assigned or timeout
    mkdir -p /tmp
    run_cmd dhcpcd ${if_name} || return 1

    # wait for IPv4 address
    while true; do
        msg "Waiting for IP address..."
        ip_addr=$(ip addr show dev ${ICS_DM_FLASH_MODE_ETH} | grep "inet " | awk '{print $2}')
        if [ ! -z "${ip_addr}" ]; then break; fi
        sleep 1
    done
    ICS_DM_FLASH_MODE_IP_ADDR="${ip_addr%/*}"

    # setup PTY
    run_cmd mkdir -p /dev/pts || return 1
    run_cmd mount -t devpts devpts /dev/pts || return 1

    # start SSH server; generate host key on the fly
    mkdir -p /etc/dropbear
    run_cmd dropbear -R || return 1
}

run_bmap_tool() {
    local umount_dev=""
    local blk_dev=""

    # detect block device
    blk_dev=$(get_block_device boot)
    blk_dev=${blk_dev%p*}
    if [ ! -b "${blk_dev}" ]; then msg_fatal "${blk_dev} does not exist or not a block device"; return 1; fi

    # setup FIFO
    run_cmd mkfifo ${ICS_DM_FLASH_MODE_FIFO} || return 1
    run_cmd chown ics-dm:ics-dm ${ICS_DM_FLASH_MODE_FIFO} || return 1

    # bmap file must be copied with scp
    msg "please run  scp <your-bmap-file> ics-dm@${ICS_DM_FLASH_MODE_IP_ADDR}:$(basename ${ICS_DM_FLASH_MODE_BMAP_FILE})"
    while true; do
        if [ -f "${ICS_DM_FLASH_MODE_BMAP_FILE}" ]; then break; fi
        sleep 1
    done

    # umount, if necessary
    mkdir -p /tmp
    cp /proc/mounts /tmp/all_mounts  # make snapshot
    while read x; do
        umount_dev=$(echo $x | awk '{print $1}')
        echo ${umount_dev} | grep -q "$(basename ${blk_dev})"
        if [ $? -eq 0 ]; then
            echo "umount ${umount_dev}"
            umount ${umount_dev} 2>/dev/null
        fi
    done </tmp/all_mounts

    msg "please run  scp <your-wic-image> ics-dm@${ICS_DM_FLASH_MODE_IP_ADDR}:$(basename ${ICS_DM_FLASH_MODE_FIFO})"
    export PATH
    run_cmd bmaptool copy --bmap ${ICS_DM_FLASH_MODE_BMAP_FILE} \
                                 ${ICS_DM_FLASH_MODE_FIFO} ${blk_dev} || return 1

    return 0  # success
}

# main entry point
flash_mode_run() {
    msg "Entering ICS DM flashing mode..."

    # disable flash mode for subsequent restarts
    set_bootloader_env_var ${ICS_DM_FLASH_MODE_VAR}

    # continue startup in case of errors
    setup_network ${ICS_DM_FLASH_MODE_ETH} || return 0
    run_bmap_tool || return 0

    sync
    msg "Rebooting system..."
    reboot -f
    # -- never reached --
}
