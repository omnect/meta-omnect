From a14e2b86cabb9567d1048368b612b5d6cdd71df2 Mon Sep 17 00:00:00 2001
From: JoergZeidler <joerg.zeidler@conplement.de>
Date: Mon, 16 Oct 2023 13:17:59 +0200
Subject: [PATCH] retry handling on failed update-validation

---
 .../result_codes.json                         |  4 ++
 src/adu_workflow/src/agent_workflow.c         | 41 ++++++++++++++++++-
 .../src/swupdate_handler_v2.cpp               | 30 ++++++++++++++
 3 files changed, 74 insertions(+), 1 deletion(-)

diff --git a/scripts/error_code_generator_defs/result_codes.json b/scripts/error_code_generator_defs/result_codes.json
index 36ce7352..4d02404b 100644
--- a/scripts/error_code_generator_defs/result_codes.json
+++ b/scripts/error_code_generator_defs/result_codes.json
@@ -337,6 +337,10 @@
               {
                 "name": "ADUC_ERC_SWUPDATE_HANDLER_INSTALL_FAILURE_UNKNOWNEXCEPTION",
                 "value": 767
+              },
+              {
+                "name": "ADUC_ERC_SWUPDATE_HANDLER_INSTALL_FAILURE_VALIDATION",
+                "value": 800
               }
             ]
           },
diff --git a/src/adu_workflow/src/agent_workflow.c b/src/adu_workflow/src/agent_workflow.c
index 23ad8a40..c39e9a5a 100644
--- a/src/adu_workflow/src/agent_workflow.c
+++ b/src/adu_workflow/src/agent_workflow.c
@@ -14,7 +14,9 @@
 
 #define __STDC_FORMAT_MACROS
 #include <inttypes.h> // PRIu64
+#include <stdio.h>
 #include <stdlib.h>
+#include <unistd.h>
 
 #include <time.h>
 
@@ -427,9 +429,31 @@ void ADUC_Workflow_HandlePropertyUpdate(
     ADUC_WorkflowData* currentWorkflowData, const unsigned char* propertyUpdateValue, bool forceUpdate)
 {
     ADUC_WorkflowHandle nextWorkflow;
+    const char omnectValidateUpdateFailedFilePath[FILENAME_MAX] =
+        "/run/omnect-device-service/omnect_validate_update_failed";
+    const char* serviceRuntimeDir = getenv("RUNTIME_DIRECTORY"); // created by deviceupdate-agent.service
+    const char* omnectUpdateRetryFileName = "/omnect_update_retry";
+    char* omnectUpdateRetryFilePath = NULL;
 
     ADUC_Result result = workflow_init((const char*)propertyUpdateValue, true /* shouldValidate */, &nextWorkflow);
 
+    if (NULL == serviceRuntimeDir)
+    {
+        Log_Error("RUNTIME_DIRECTORY was not found.");
+        return;
+    }
+
+    if (NULL
+        != (omnectUpdateRetryFilePath = malloc(strlen(serviceRuntimeDir) + strlen(omnectUpdateRetryFileName) + 1)))
+    {
+        strcpy(omnectUpdateRetryFilePath, serviceRuntimeDir);
+        strcat(omnectUpdateRetryFilePath, omnectUpdateRetryFileName);
+    }
+    else
+    {
+        Log_Error("Cannot allocate omnectUpdateRetryFilePath.");
+    }
+
     workflow_set_force_update(nextWorkflow, forceUpdate);
 
     if (IsAducResultCodeFailure(result.ResultCode))
@@ -494,6 +518,22 @@ void ADUC_Workflow_HandlePropertyUpdate(
 
                 Log_Debug("Retry %s is applicable", newRetryToken);
 
+                // If omnect_validate_update_failed file barrier is present and an update retry was
+                // triggered by cloud, we create omnect_update_retry file in order to try to install
+                // the update again.
+                FILE* fp;
+
+                Log_Debug("Retry: '%s' detected.", omnectValidateUpdateFailedFilePath);
+
+                if ((NULL == omnectUpdateRetryFilePath) || (NULL == (fp = fopen(omnectUpdateRetryFilePath, "w"))))
+                {
+                    Log_Error("Cannot create '%s'", omnectUpdateRetryFilePath);
+                }
+                else
+                {
+                    fclose(fp);
+                }
+
                 // Sets both cancellation type to Retry and updates the current retry token
                 workflow_update_retry_deployment(currentWorkflowData->WorkflowHandle, newRetryToken);
 
@@ -964,7 +1004,6 @@ void ADUC_Workflow_WorkCompletionCallback(const void* workCompletionToken, ADUC_
                     // Reset workflow state to process deployment and transfer
                     // the deferred workflow to current.
                     workflow_update_for_replacement(workflowData->WorkflowHandle);
-
                 }
                 else
                 {
diff --git a/src/extensions/step_handlers/swupdate_handler_v2/src/swupdate_handler_v2.cpp b/src/extensions/step_handlers/swupdate_handler_v2/src/swupdate_handler_v2.cpp
index db5c6c57..ee28f8e0 100644
--- a/src/extensions/step_handlers/swupdate_handler_v2/src/swupdate_handler_v2.cpp
+++ b/src/extensions/step_handlers/swupdate_handler_v2/src/swupdate_handler_v2.cpp
@@ -300,12 +300,42 @@ ADUC_Result SWUpdateHandlerImpl::Download(const tagADUC_WorkflowData* workflowDa
     memset(&fileEntity, 0, sizeof(fileEntity));
     int fileCount = workflow_get_update_files_count(workflowHandle);
     ADUC_Result result = SWUpdate_Handler_DownloadScriptFile(workflowHandle);
+    bool retry = false;
+    std::ifstream omnectValidateUpdateFailedFilePath("/run/omnect-device-service/omnect_validate_update_failed");
+    const char* runtimeDir = std::getenv("RUNTIME_DIRECTORY");
+    std::string omnectUpdateRetryFileName("/omnect_update_retry");
 
     if (IsAducResultCodeFailure(result.ResultCode))
     {
         goto done;
     }
 
+    if (NULL == runtimeDir)
+    {
+        Log_Error("Update validation on new boot part failed. Rebooted to old boot part.");
+    }
+    else
+    {
+        std::ifstream omnectUpdateRetryFilePath(std::string(runtimeDir) + omnectUpdateRetryFileName);
+        retry = omnectUpdateRetryFilePath.good();
+    }
+
+    // We return with an error in case we just booted into here after an update validation
+    // failed on the new partition. We do this in order to step into update failed state
+    // which also shows up in ADU cloud and offers triggering an update retry.
+    // If the cloud triggered a retry we ignore omnect_validate_update_failed flag.
+    if (omnectValidateUpdateFailedFilePath.good())
+    {
+        if (!retry)
+        {
+            Log_Error("Update validation on new boot part failed. Rebooted to old boot part.");
+            result.ExtendedResultCode = ADUC_ERC_SWUPDATE_HANDLER_INSTALL_FAILURE_VALIDATION;
+            goto done;
+        }
+
+        Log_Info("Retry update after failed update vailidation.");
+    }
+
     // Determine whether to continue downloading the rest.
     installedCriteria = workflow_get_installed_criteria(workflowData->WorkflowHandle);
     result = IsInstalled(workflowData);
