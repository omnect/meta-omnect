DISTRO = "ics-dm-os"
DISTRO_NAME = "${DISTRO_NAME_PREFIX}ICS-DM-OS${DISTRO_NAME_SUFFIX}"
DISTROOVERRIDES = "poky:ics-dm-os"
# DISTRO_VERSION is POKY_VERSION (since we include poky conf before our own
# distro settings) appended with a build number.
DISTRO_VERSION:append = ".${ICS_DM_BUILD_NUMBER}"
TARGET_VENDOR = "-icsdm"

# Systemd
INIT_MANAGER ?= "systemd"
# disable sysusers
# Uids/gids created by systemd-sysusers could potentially clash with
# uids/gids introduced by later update images.
PACKAGECONFIG:remove:pn-systemd = "sysusers"

JOURNALD_SystemMaxUse ?= "128M"

# configure hardware watchdog, if supported by hardware platform
# the maximum watchdog deadline depends also on the hardware capabilities
SYSTEMD_RuntimeWatchdogSec  ?= "30"
SYSTEMD_RebootWatchdogSec   ?= "90"
SYSTEMD_ShutdownWatchdogSec ?= "90"

# Use opkg's ipk
PACKAGE_CLASSES ?= "package_ipk"

# Check if Buildsystem can reach remote sources
CONNECTIVITY_CHECK_URIS ?= "https://github.com/ICS-DeviceManagement "

# Image configuration
IMAGE_FSTYPES = "ext4.gz wic.xz wic.bmap"
# rm kernel from boot partition, we use a bundled initramfs kernel in rootfs
IMAGE_BOOT_FILES:remove = "uImage Image"
# instead of kernel we want the initramfs bundled kernel
IMAGE_INSTALL:remove = "kernel"

# Disable busybox syslog
SRC_URI:remove:pn-busybox = "file://syslog.cfg"

# define partition (default) sizes in KiB
#     Note, the last data partition will be expanded during the first boot after image flashing inside the INITRAMFS.
#     This means, ICS_DM_PART_SIZE_DATA is the initial value.
#     Note, when using kas/feature/ics-dm-os-common.yaml the values configured there will override values here.
ICS_DM_PART_SIZE_BOOT ?= "40960"
ICS_DM_PART_SIZE_UBOOT_ENV ?= "64"
ICS_DM_PART_SIZE_ROOTFS ?= "760832"
ICS_DM_PART_SIZE_FACTORY ?= "40960"
ICS_DM_PART_SIZE_CERT ?= "40960"
ICS_DM_PART_SIZE_ETC ?= "40960"
ICS_DM_PART_SIZE_DATA ?= "524288"

# enable variable expansion in wks includes
WICVARS:append = " ICS_DM_PART_SIZE_BOOT"
WICVARS:append = " ICS_DM_PART_SIZE_UBOOT_ENV"
WICVARS:append = " ICS_DM_PART_SIZE_ROOTFS"
WICVARS:append = " ICS_DM_PART_SIZE_FACTORY"
WICVARS:append = " ICS_DM_PART_SIZE_CERT"
WICVARS:append = " ICS_DM_PART_SIZE_ETC"
WICVARS:append = " ICS_DM_PART_SIZE_DATA"

# location of u-boot environment areas in KiB
#   - Fixed addresses are used (--offset in WKS file), suitable for u-boot configuration.
#   - It has to be aligned with the boot partition (ICS_DM_PART_SIZE_BOOT) and the MBR/GPT.
#   - Wic aborts the build, in the case the partitions cannot be located at the fixed location.
#   - The partitions will be initialized with 0xff (--source in WKS file). In this way, u-boot is able
#     to create the default environment during the first boot after flashing the SD-Card image.
#   - No entries inside the partition table will be created (--no-table in WKS file).
#   - The variable ICS_DM_PART_SPARE1 is used to define a gap behind the boot partition.
#   - The variable ICS_DM_PART_SPARE2 is used to define a gap between both environment partitions.
#     In this way, the environment partitions can be located in different erase blocks.
ICS_DM_PART_SPARE1 = "8192"
ICS_DM_PART_SPARE2 = "1984"
ICS_DM_PART_OFFSET_UBOOT_ENV1 ?= "${@int(d.getVar('ICS_DM_PART_SIZE_BOOT')) + \
                                    int(d.getVar('ICS_DM_PART_SPARE1'))}"
ICS_DM_PART_OFFSET_UBOOT_ENV2 ?= "${@int(d.getVar('ICS_DM_PART_OFFSET_UBOOT_ENV1')) + \
                                    int(d.getVar('ICS_DM_PART_SIZE_UBOOT_ENV')) + \
                                    int(d.getVar('ICS_DM_PART_SPARE2'))}"

# limit max rootfs size
IMAGE_ROOTFS_MAXSIZE = "${ICS_DM_PART_SIZE_ROOTFS}"

# initramfs
ICS_DM_INITRAMFS_FSTYPE = "cpio.gz.u-boot"
ICS_DM_INITRAMFS_IMAGE_NAME = "${DISTRO_NAME}_${DISTRO_VERSION}_${MACHINE}-initramfs"

# enable curl-native with nghttp2 support for cargo-native(rust)
#
# todo: remove that if iot-identity-service is
#       not using cargo directly to download "vendor" dependencies anymore,
#       e.g. when we switch back to use meta-iotedge instead of own recipes
PACKAGECONFIG:append:pn-curl-native = " nghttp2"
# unfortunately the above line introduces a circular dependency error.
# we fix it by disabling cmake-native's download feature.
DEPENDS:remove:pn-cmake-native = "curl-native"
CMAKE_EXTRACONF:append:pn-cmake-native = " -DCMAKE_USE_SYSTEM_LIBRARY_CURL=0 -DCMAKE_USE_OPENSSL=OFF"

# lower alternative default priority
ALTERNATIVE_PRIORITY_coreutils = "30"
ALTERNATIVE_PRIORITY_procps = "40"

# explicitly control utilities used
ALTERNATIVE_PRIORITY_coreutils[dd] = "100"
ALTERNATIVE_PRIORITY_procps[ps] = "100"

# update-ca-certificates is not working when we include the following patch
# which poky applies
SRC_URI:remove:pn-ca-certificates= "file://update-ca-certificates-support-Toybox.patch"

# disable automatic start of swupdate.service
SYSTEMD_SERVICE:swupdate:remove:pn-swupdate= "swupdate.service"

# enforce identical busybox configuration for iot and iotedge; non-busybox tools lspci, lsusb, ps, nsenter are used
BBMASK:append = " ${@bb.utils.contains('DISTRO_FEATURES', 'iotedge', '/meta-virtualization/recipes-core/busybox/busybox_%.bbappend', '', d)}"

# define default devel tools to be included in image
ICS_DM_DEVEL_TOOLS_DEFAULT = "\
    curl \
    ethtool \
    gdbserver \
    htop \
    ldd \
    lshw \
    lsof \
    ltrace \
    mmc-utils \
    parted \
    screen \
    smartmontools \
    strace \
    sysstat \
    systemd-analyze \
    tcpdump \
    valgrind \
    e2fsprogs e2fsprogs-tune2fs \
    jq \
"
